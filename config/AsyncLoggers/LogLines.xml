<?xml version="1.0" encoding="UTF-8"?>
<!--THIS FILE IS AUTOGENERATED. PLEASE BE CAUTIOUS WHEN MAKING CHANGES.
    - The "default_status" attribute specifies the default behavior when a log call's "status" is set to "Default" or is invalid.
    - **WARNING** Changing the default might increase boot times!-->
<Configuration version="AsyncLoggers v1.1" default_status="BepInEx">
  <!--Here’s an explanation of this configuration format:

1.  **File Structure**:
    - **Assembly**: Represents an assembly (e.g., 'Assembly-CSharp').
    - **Class**: Represents a class within the assembly (e.g., 'BaboonBirdAI').
    - **Method**: Represents a method within the class (e.g., 'DropHeldItemAndSync').

2.  **User-Editable Entries**:
    - Entries you can modify are marked as `<LogCall>`.
    - Each `<LogCall>` element contains:
      - The pseudo-code of the log call.
      - An attribute called `status`.

3.  **Status Attribute**:
    - `status="Unity"`: No changes from the original code.
    - `status="BepInEx"`: Log call is redirected using the BepInEx logger (non-blocking thanks to this mod).
    - `status="Suppressed"`: Log call is removed and nothing will be printed.
   
3.1 **Default Status Attribute**:
    - The first element of this file has a "default_status" attribute (`<Configuration default_status="Unity">`)
    - Edit it to change the behavior of all `status="Default"` entries

4.  **Cooldown Attribute** (only applicable if `status="BepInEx"`):
    - An optional "cooldown" attribute may be added to limit how often the log messages can appear. (Value in milliseconds).
    - Example: `<LogCall status="BepInEx" cooldown="500">LogError("Error message")</LogCall>`
   
4.1 **Cooldown Attribute Warning**
    - Please use this attribute with care as complex loglines might not work or crash when using it!

**Important**:
- All attribute values must be enclosed in quotes.-->
  <Assembly name="Assembly-CSharp">
    <Class name="AnimatedTextureUV">
      <Method name="OnEnable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Animating material now")</LogCall>
      </Method>
    </Class>
    <Class name="BaboonBirdAI">
      <Method name="SyncInitialValuesServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DropHeldItemAndSync">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0} Error: DropItemAndSync called when baboon has no scrap!", this.thisEnemyIndex))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0} Error: No network object in held scrap {1}", this.thisEnemyIndex, this.heldScrap.gameObject.name))</LogCall>
      </Method>
      <Method name="DropScrapServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DropScrapClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0}; Error, was not able to get network object from dropped item client rpc", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="DropScrap">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Baboon: my held item is null when attempting to drop it!!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Baboon #{0}: Dropped item which was held by a player", this.thisEnemyIndex))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Baboon #{0}: Dropped item", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="GrabItemAndSync">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0} Error: GrabItemAndSync called when baboon is already carrying scrap!", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="GrabScrapServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0} error: Could not get grabbed network object from reference on server", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="GrabScrapClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0}; Error, was not able to get id from grabbed item client rpc", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="GrabScrap">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Baboon #{0}: Trying to grab another item ({1}) while hands are already full with item ({2}). Dropping the currently held one.", this.thisEnemyIndex, item.gameObject.name, this.heldScrap.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Baboon #{0}: Grabbing item!!! {1}", this.thisEnemyIndex, this.heldScrap.gameObject.name))</LogCall>
      </Method>
      <Method name="StopFocusingThreatServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetAggressiveModeServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetThreatInViewServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="EnemyEnterRestModeServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="EnemyGetUpServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ReactToThreat">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Baboon: Error, threat did not contain network object. All objects implementing IVisibleThreat must have a NetworkObject")</LogCall>
      </Method>
      <Method name="StartFocusOnThreatServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartFocusOnThreatClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon: Error, could not get network object from id for StartFocusOnThreatClientRpc; id: {0}", var_0.NetworkObjectId))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Baboon: Error, threat transform did not contain IVisibleThreat in StartFocusOnThreatClientRpc; id: {0}", var_0.NetworkObjectId))</LogCall>
      </Method>
      <Method name="DoLOSCheck">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Baboon hawk: Seeing visible threat: {0}; type: {1}", RoundManager.Instance.tempColliderResults[var_11].transform.name, var_0.type))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Baboon #{0}; could not see threat, b", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="PingBaboonInterest">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Baboon bird #{0}: Did NOT listen to ping of importance {1} as focus level is {2}", this.thisEnemyIndex, pingImportance, this.focusLevel))</LogCall>
      </Method>
      <Method name="PingBirdInterestServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="LeaveCurrentScoutingGroup">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon #{0}: Scouting group was not null but did not contain me as a member!", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="LeaveScoutingGroupServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartScoutingGroupServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartScoutingGroupClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon enemy #{0}: Could not get network object from reference in JoinScoutingGroupClientRpc; {1}", this.thisEnemyIndex, leaderNetworkObject.NetworkObjectId))</LogCall>
      </Method>
      <Method name="JoinScoutingGroupServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="JoinScoutingGroupClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Baboon enemy #{0}: Could not get network object from reference in JoinScoutingGroupClientRpc; {1}", this.thisEnemyIndex, otherBaboonNetworkObject.NetworkObjectId))</LogCall>
      </Method>
      <Method name="StartMiscAnimationServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3452382367">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1418775270">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_869682226">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1546030380">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_443869275">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3428942850">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1806580287">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3614203845">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3933590138">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1670979535">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2459653399">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3367846835">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1775372234">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1580405641">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="BridgeTrigger">
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Bridge collapsed! On server")</LogCall>
      </Method>
      <Method name="BridgeFallServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2883846656">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="BushWolfEnemy">
      <Method name="CalculateNestRange">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Got no colliders for nest range")</LogCall>
      </Method>
      <Method name="SyncWeedPositionsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="GetBiggestWeedPatch">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Bush wolf: No game objects found with spore tag; cancelling")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("{0}: Mold spore {1} at {2} surrounded by {3}", [var_6, var_0[var_6].gameObject.name, var_0[var_6].transform.position, var_3]))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Bush wolf: Most surrounding spores is {0}", var_2))</LogCall>
        <LogCall status="Suppressed">Debug.Log("Bush wolf: All spores found were lone spores; cancelling")</LogCall>
      </Method>
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Beginning attack on '{0}'; distance: {1}", var_3.playerUsername, this.pathDistance))</LogCall>
      </Method>
      <Method name="SyncTargetPlayerAndAttackServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SyncNewHidingSpotServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DoGrowlServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SeeBushWolfServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Fox A")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox B")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Fox C; {0}; {1}", var_14, var_15))</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox D")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox E")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox F")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox G")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox H")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox I")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Fox J")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Fox spotted meter: {0}", this.spottedMeter))</LogCall>
      </Method>
      <Method name="__rpc_handler_4128579861">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2030618602">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1220991600">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_610520803">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_788204480">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="ButlerEnemyAI">
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Starting leave crime scene timer")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Target player: {0}", this.targetPlayer.playerClientId))</LogCall>
        <LogCall status="Default">Debug.Log("State 2, changing ownership A")</LogCall>
        <LogCall status="Default">Debug.Log("State 2, Switching to state 0, killed target")</LogCall>
        <LogCall status="Default">Debug.Log("State 2, Switching to state 0, lost in chase")</LogCall>
        <LogCall status="Default">Debug.Log("State 2, Switching to state 0, found another player or multiple players 1")</LogCall>
        <LogCall status="Default">Debug.Log("State 2, Switching to state 0, found another player or multiple players 2")</LogCall>
      </Method>
      <Method name="LookForChanceToMurder">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Exiting leave crime scene mode, 0")</LogCall>
        <LogCall status="Default">Debug.Log("Found a player; Caught red-handed, entering murder state")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Seen player {0}: {1}", var_0, this.seenPlayers[var_0]))</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Target player: {0}; is dead?: {1}", this.targetPlayer.playerClientId, this.targetPlayer.isPlayerDead))</LogCall>
      </Method>
      <Method name="SyncKilledLastTargetFalseClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Client received sync killed last target false client rpc")</LogCall>
      </Method>
      <Method name="SwitchOwnershipAndSetToStateServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartCheckForPlayers">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Butler: Checking for players")</LogCall>
      </Method>
      <Method name="SetButlerRunningServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetSweepingAnimServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="PingAttention">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Butler: pinged attention to position")</LogCall>
      </Method>
      <Method name="ButlerNoticePlayerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="CheckForPlayersServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartAnimationServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SyncTargetServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3982620855">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3907946013">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2751847406">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2544993960">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3725839143">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_581084606">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1143004490">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="CaveDwellerAI">
      <Method name="PickUpBabyLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Player held by null?: {0}", this.propScript.playerHeldBy == null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Player held by: {0}", this.propScript.playerHeldBy))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Player held by playerclientid: {0}", this.propScript.playerHeldBy.playerClientId))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Set currentownershiponthisclient to {0}", this.currentOwnershipOnThisClient))</LogCall>
      </Method>
      <Method name="DropBabyLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Drop baby A")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Set ownership of creature. Currentownershiponthisclient: {0}", this.currentOwnershipOnThisClient))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Drop on position: {0}", var_2))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Drop Baby C; {0}", this.propScript.startFallingPosition))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Drop Baby C global; {0}", this.propScript.startFallingPosition))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Got nav mesh position : {0}; {1}; dist: {2}", RoundManager.Instance.GotNavMeshPositionResult, var_2, Vector3.Distance(this.transform.position, var_4.transform.position)))</LogCall>
        <LogCall status="Default">Debug.Log("Drop baby D")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Drop baby F; got no floor target; drop pos: {0}", var_2))</LogCall>
      </Method>
      <Method name="DoBabyAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Starting search at node ", var_14.name), var_14.gameObject)</LogCall>
      </Method>
      <Method name="SetRolledOverLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set rolled local client to {0}; scared: {1}", setRolled, scared))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Set fall over anim: {0}", setRolled))</LogCall>
      </Method>
      <Method name="DetectNoise">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Heard noise; noise loudness: {0}; noise distance: {1}", noiseLoudness, var_0))</LogCall>
      </Method>
      <Method name="SetCryingLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Baby crying set to {0}", setCrying))</LogCall>
        <LogCall status="Default">Debug.Log("Baby crying set true; play")</LogCall>
        <LogCall status="Default">Debug.Log("Baby crying  set false")</LogCall>
      </Method>
      <Method obsolete="true" name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall obsolete="true" status="Default">Debug.Log(String.Format("Baby transform position y: {0}; is outside: {1}", this.transform.position.y, this.isOutside))</LogCall>
      </Method>
    </Class>
    <Class name="CaveDwellerPhysicsProp">
      <Method name="SetRockingBabyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StopRockingBabyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="EquipItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Equip item function")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Baby prop script reached floor target Equipped : {0} ", this.reachedFloorTarget))</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Use up batteries local")</LogCall>
      </Method>
      <Method name="EnableItemMeshes">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Concat("DISABLING/ENABLING SKINNEDMESH: ", var_1[var_3].gameObject.name))</LogCall>
      </Method>
      <Method name="DiscardItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Discard function called")</LogCall>
      </Method>
      <Method name="__rpc_handler_565448931">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1666766308">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="ClaySurgeonAI">
      <Method name="DoBeatServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3465640270">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="ColdOpenCinematicCutscene">
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Input asset not found!")</LogCall>
      </Method>
    </Class>
    <Class name="DeleteFileButton">
      <Method name="DeleteFile">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("AAAAAA")</LogCall>
        <LogCall status="Default">Debug.Log(this.fileToDelete)</LogCall>
        <LogCall obsolete="true" status="Default">Debug.Log(var_1[var_3].fileNum)</LogCall>
      </Method>
    </Class>
    <Class name="DepositItemsDesk">
      <Method name="PlaceItemOnCounter">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("discard held object called from deposit items desk")</LogCall>
      </Method>
      <Method name="AddObjectToDeskServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("ServerRpc: Could not find networkobject in the object that was placed on desk.")</LogCall>
      </Method>
      <Method name="AddObjectToDeskClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("ClientRpc: Could not find networkobject in the object that was placed on desk.")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Desk: Waiting to grab the items on the desk; {0}", this.grabObjectsTimer))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Desk: no objects on counter, waiting with door open; {0}", this.waitingWithDoorOpenTimer))</LogCall>
      </Method>
      <Method name="Attack">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Current company monster mood has no monster animations to enable.")</LogCall>
        <LogCall status="Default">Debug.Log("Tentacles appear")</LogCall>
        <LogCall status="Default">Debug.Log("Giant tongue appears")</LogCall>
        <LogCall status="Default">Debug.Log("Giant hand appears and searches")</LogCall>
      </Method>
      <Method name="CollisionDetect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Tentacle collision")</LogCall>
        <LogCall status="Default">Debug.Log("Tongue collision")</LogCall>
        <LogCall status="Default">Debug.Log("Hand collision")</LogCall>
      </Method>
      <Method name="FinishKillAnimation">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Tentacles finishing animation")</LogCall>
        <LogCall status="Default">Debug.Log("Tongue finishing animation")</LogCall>
        <LogCall status="Default">Debug.Log("Hand finishing animation")</LogCall>
      </Method>
      <Method name="SetTimesHeardNoiseServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("NOISE D")</LogCall>
      </Method>
    </Class>
    <Class name="DoorLock">
      <Method name="UnlockDoor">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Unlocking door")</LogCall>
      </Method>
    </Class>
    <Class name="FlowerSnakeEnemy">
      <Method name="StartFlyingServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1804766282">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="GiftBoxItem">
      <Method name="OpenGiftBoxServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Error: There is no object in gift box!")</LogCall>
      </Method>
    </Class>
    <Class name="HauntedMaskItem">
      <Method name="ItemActivate">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("attaching: {attaching}; finishedAttaching: {finishedAttaching}")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Setting maskOn {0}", buttonDown))</LogCall>
      </Method>
      <Method name="DiscardItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Discard item called; not going through since headmask is not null")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Discard item called; headmask null: {0}", this.currentHeadMask == null))</LogCall>
      </Method>
      <Method name="PocketItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Discard item called; not going through since headmask is not null")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Discard item called; headmask null: {0}", this.currentHeadMask == null))</LogCall>
      </Method>
      <Method name="CancelAttachToPlayerOnLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Caught exception while attempting to unmuffle player voice from mask item: {0}", var_0))</LogCall>
      </Method>
      <Method name="AttachServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="AttachToPlayerOnLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Caught exception while attempting to muffle player voice from mask item: {0}", var_0))</LogCall>
      </Method>
      <Method name="MaskClampToHeadAnimationEvent">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Mask clamp animation event called")</LogCall>
        <LogCall status="Default">Debug.Log("Creating currentHeadMask")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Destroying object in hand; headmask null: {0}", this.currentHeadMask == null))</LogCall>
      </Method>
      <Method name="FinishAttaching">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Player could not die so the mask did not spawn a mimic")</LogCall>
      </Method>
      <Method name="CreateMimicServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.LogError("Previousplayerheldby is null so the mask mimic could not be spawned")</LogCall>
        <LogCall status="Default">Debug.Log("Server creating mimic from mask")</LogCall>
        <LogCall status="Default">Debug.Log("No mimic enemy set for mask")</LogCall>
        <LogCall status="Default">Debug.Log("Got network object for mask enemy")</LogCall>
        <LogCall status="Default">Debug.Log("No nav mesh found; no mimic could be created")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Got 15% chance")</LogCall>
      </Method>
      <Method name="__rpc_handler_2665559382">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1065539967">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="JesterAI">
      <Method name="OnCollideWithPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Jester collided with player: ", other.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log("Jester collided A")</LogCall>
        <LogCall status="Default">Debug.Log("Jester collided C")</LogCall>
        <LogCall status="Default">Debug.Log("Jester collided D")</LogCall>
      </Method>
    </Class>
    <Class name="JetpackItem">
      <Method name="JetpackEffect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Is jetpack audio playing?: {0}", this.jetpackAudio.isPlaying))</LogCall>
      </Method>
      <Method name="DiscardItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Owner of jetpack?: {0}", this.IsOwner))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Is dead?: {0}", this.playerHeldBy.isPlayerDead))</LogCall>
      </Method>
      <Method name="ExplodeJetpackClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Spawning explosion")</LogCall>
      </Method>
    </Class>
    <Class name="KepRemapPanel">
      <Method name="LoadKeybindsUI">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("{0}: rebind controls length: {1}", this.remappableKeys[var_6].ControlName, this.remappableKeys[var_6].currentInput.action.controls.Count))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}: rebind control binding index is {1}", this.remappableKeys[var_6].ControlName, this.remappableKeys[var_6].rebindingIndex))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("control #{0}: ${1}", var_9, InputControlPath.ToHumanReadableString(this.remappableKeys[var_6].currentInput.action.bindings[InputActionRebindingExtensions.GetBindingIndexForControl(this.remappableKeys[var_6].currentInput.action, this.remappableKeys[var_6].currentInput.action.controls[var_9])].effectivePath, 2, null)))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("bindingIndex of {0} : {1}; display bindingIndex: {2}", var_2.currentlyUsedKeyText.text, var_1, var_7))</LogCall>
      </Method>
    </Class>
    <Class name="KnifeItem">
      <Method name="HitKnife">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Previousplayerheldby is null on this client when HitShovel is called.")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Exception caught when hitting object with shovel from player #{0}: {1}", this.previousPlayerHeldBy.playerClientId, var_14))</LogCall>
      </Method>
      <Method name="HitShovelServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2696735117">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="LassoManAI">
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Crawler: Started new search; is searching?: {0}", this.searchForPlayers.inProgress))</LogCall>
        <LogCall status="Default">Debug.Log("Crawler: Lost player in chase; beginning search where the player was last seen")</LogCall>
        <LogCall status="Default">Debug.Log("Crawler: Found player during chase; stopping search coroutine and moving after target player")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Seeing player; {0}", this.noticePlayerTimer))</LogCall>
        <LogCall status="Default">Debug.Log("Begin chasing local client")</LogCall>
        <LogCall status="Default">Debug.Log("Seeing player!!!!")</LogCall>
      </Method>
      <Method name="MakeScreechNoiseServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3259100395">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="LevelGenerationManager">
      <Method name="Awake">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("PLAYERS MANAGER WAS NOT FOUND FROM OTHER SCENE!")</LogCall>
      </Method>
    </Class>
    <Class name="MaskedPlayerEnemy">
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error when initializing enemy variables for {0} : {1}", this.gameObject.name, var_0))</LogCall>
      </Method>
      <Method name="SetEnemyAsHavingNoPlayerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="TeleportMaskedEnemyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="LookAtDirectionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="LookAtPositionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="LookAtPlayerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StopLookingAtTransformServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetHandsOutServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetCrouchingServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetRunningServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DetectNoise">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Can't hear noise reason A")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Can't hear noise reason B")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Noise heard relative loudness: {0}", var_1))</LogCall>
      </Method>
      <Method name="__rpc_handler_3110137062">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_657232826">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2502006210">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_675153417">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1141953697">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1407409549">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_519961256">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2560207573">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3309468324">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="UseElevator">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("goUp: {0}", goUp))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}, {1}", this.elevatorScript.elevatorFinishedMoving, this.PathIsIntersectedByLineOfSight(this.elevatorScript.elevatorInsidePoint.position, 0, 0, 0) == 0))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("goUp: {0}, elevatormovingdown: {1}", goUp, this.elevatorScript.elevatorMovingDown))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}, {1}, {2}", this.elevatorScript.elevatorDoorOpen, Vector3.Distance(this.transform.position, this.elevatorScript.elevatorInsidePoint.position) &lt; 1, this.elevatorScript.elevatorMovingDown == goUp))</LogCall>
      </Method>
    </Class>
    <Class name="MineshaftElevatorController">
      <Method name="SetElevatorMusicServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Elevator finished moving!")</LogCall>
      </Method>
      <Method name="AnimationEvent_ElevatorFinishBottom">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Elevator finished moving B!")</LogCall>
      </Method>
      <Method name="ElevatorFinishServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetElevatorMovingServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="CallElevator">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Call elevator 0; call down: {0}; elevator moving down: {1}", callDown, this.elevatorMovingDown))</LogCall>
      </Method>
      <Method name="__rpc_handler_248132445">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1003104612">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2622819109">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="MoldSpreadManager">
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("planet mold states length: ${0}", this.planetMoldStates.Count()))</LogCall>
      </Method>
      <Method name="SyncDestroyedMoldPositions">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Sync A; {0}", destroyedMoldSpots.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Sync B{0}; {1}", var_0, destroyedMoldSpots[var_0]))</LogCall>
      </Method>
      <Method name="DestroyMoldAtIndex">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("C {0}", this.planetMoldStates[StartOfRound.Instance.currentLevelID] != null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("D {0}", this.planetMoldStates[StartOfRound.Instance.currentLevelID].destroyedMold != null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("E; null? {0}", this.generatedMold[index] == null))</LogCall>
      </Method>
      <Method name="DestroyMoldAtPosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("weeds found at pos {0}: {1}", pos, var_0))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Index: {0}", var_2))</LogCall>
      </Method>
      <Method name="GenerateMold">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("No spores generated; setting iterations to 0")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Growing back mold at index {0}", var_12[var_24].generationId))</LogCall>
      </Method>
    </Class>
    <Class name="NutcrackerEnemyAI">
      <Method name="InitializeNutcrackerValuesServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="GrabGun">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Setting gun scrap value")</LogCall>
      </Method>
      <Method name="DropGunServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ReloadGunServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="FireGunServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1465144951">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3846014741">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3736826466">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3870955307">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="PlaceableObjectsSurface">
      <Method name="PlaceObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Placing object in storage")</LogCall>
        <LogCall status="Default">Debug.Log("discard held object called from placeobject")</LogCall>
      </Method>
    </Class>
    <Class name="PufferAI">
      <Method name="StompServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ShakeTailServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2829667697">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3391967647">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="QuicksandTrigger">
      <Method name="OnTriggerStay">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Set local player to sinking!")</LogCall>
      </Method>
      <Method name="OnExit">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Quicksand is not sinking local player!")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Quicksand is sinking local player!")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Quicksand is sinking local player! B")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Quicksand is sinking local player! C")</LogCall>
      </Method>
    </Class>
    <Class name="RadMechAI">
      <Method name="StartFlying">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Mech #{0} could not get a landing position!", this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="SetTargetToThreatClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Error: RadMech could not get IVisibleThreat in transform of network object sent in RPC (SetTargetToThreatClientRpc)")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error: RadMech could not find threat NetworkObject sent by RPC through reference; ID: {0}", netObject.NetworkObjectId))</LogCall>
      </Method>
    </Class>
    <Class name="SandSpiderAI">
      <Method name="SpiderTurnBodyIntoWebServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SpiderHangBodyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="HangBodyFromCeiling">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Sand spider: Held body was null, couldn't hang up")</LogCall>
      </Method>
      <Method name="GrabBodyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SyncMeshContainerPositionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="AttemptPlaceWebTrap">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Got spider web raycast; end point: {0}; {1}", this.rayHit.point, this.rayHit.distance))</LogCall>
      </Method>
      <Method name="SpawnWebTrapServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_224635274">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1372568795">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_196846835">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3294703349">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3159704048">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="SandSpiderWebTrap">
      <Method name="PlayerLeaveWeb">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Player leave web called")</LogCall>
      </Method>
    </Class>
    <Class name="SandWormAI">
      <Method name="EmergeServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ShakePlayerCameraInProximity">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Shaking camera strong")</LogCall>
        <LogCall status="Default">Debug.Log("Shaking camera long")</LogCall>
        <LogCall status="Default">Debug.Log("Shaking camera small")</LogCall>
      </Method>
      <Method name="EatPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("KILL player called")</LogCall>
      </Method>
      <Method name="__rpc_handler_1498805140">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="SaveFileUISlot">
      <Method name="SetChallengeFileSettings">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(ES3.Load("ProfitEarned", this.fileString, 0))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("scrapEarnedInFile: {0}", var_0))</LogCall>
      </Method>
    </Class>
    <Class name="AudioReverbTrigger">
      <Method name="ChangeAudioReverbForPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Network manager is null")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Concat("The audio preset set by ", this.gameObject.name, " is not one allowed by the audioreverbpresets in the scene."))</LogCall>
        <LogCall status="Default">Debug.LogError("Audio preset AudioReverbTrigger is set to call another audio preset which would crash!")</LogCall>
      </Method>
    </Class>
    <Class name="HUDManager">
      <Method name="SetSavedValues">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Has beta?: {hasBeta}")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Has beta save data: {0}", ES3.Load("playedDuringBeta", "LCGeneralSaveData", 1)))</LogCall>
      </Method>
      <Method name="UpdateBoxesSpectateUI">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Removing player spectate box since they disconnected")</LogCall>
      </Method>
      <Method name="GetTextureFromImage">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Slot K")</LogCall>
        <LogCall status="Default">Debug.Log("Slot L")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Adding boxes")</LogCall>
      </Method>
      <Method name="UpdateScanNodes">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error in updatescanNodes A: {0}", var_4))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error in updatescannodes B: {0}", var_5))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error in updatescannodes C: {0}", var_6))</LogCall>
      </Method>
      <Method name="DisplayCreditsEarning">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Earned {0}; sold {1} items; new credits amount: {2}", creditsEarned, objectsSold.Count(), newGroupCredits))</LogCall>
      </Method>
      <Method name="FillChallengeResultsStats">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Scrap collected B: {0}", scrapCollected))</LogCall>
      </Method>
      <Method name="SyncAllPlayerLevelsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SyncAllPlayerLevelsClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing player level from server: {0}", var_1))</LogCall>
      </Method>
      <Method name="SyncPlayerLevelClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Error: Player level synced in client RPC was above the max player level!")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing player level from client #{0}: {1}", playerId, var_0))</LogCall>
      </Method>
      <Method name="SetPlayerLevel">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("XP gain before scaling to scrap returned: {0}", var_0))</LogCall>
        <LogCall status="Default">Debug.Log(RoundManager.Instance.scrapCollectedInLevel / RoundManager.Instance.totalScrapValueInLevel)</LogCall>
        <LogCall status="Default">Debug.Log("Gained no XP")</LogCall>
      </Method>
      <Method name="ApplyPenalty">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("New group credits after penalty: {0}", var_1.groupCredits))</LogCall>
      </Method>
      <Method name="AlarmHornServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2352591293">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1616150480">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="SoundManager">
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("soumdmanager: {0}; {1}", this.localPlayer == null, Unity.Netcode.NetworkManager.Singleton == null))</LogCall>
      </Method>
      <Method name="PlayAmbientSound">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("soundtype: {0}; lastSound: {1}", var_0, this.lastSoundTypePlayed))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("adding to sound probabilities list; array length: {0}", var_3.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(this.audioClipProbabilities.Count)</LogCall>
        <LogCall status="Default">Debug.Log(RoundManager.Instance.GetRandomWeightedIndexList(this.audioClipProbabilities, this.audioRandom))</LogCall>
      </Method>
      <Method name="PlayAmbienceClipClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("clip index: {0}; current planet: {1}", clipIndex, StartOfRound.Instance.currentLevel.PlanetName))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Current inside ambience clips length: {0}", this.currentLevelAmbience.insideAmbience.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Current outside ambience clips length: {0}", this.currentLevelAmbience.outsideAmbience.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Current ship ambience clips length: {0}", this.currentLevelAmbience.shipAmbience.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(ex)</LogCall>
      </Method>
    </Class>
    <Class name="TimeOfDay">
      <Method name="MoveTimeOfDay">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error updating time of day: {0}", var_0))</LogCall>
      </Method>
      <Method name="PlayTimeMusicDelayed">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Already playing music; cancelled starting new music")</LogCall>
      </Method>
      <Method name="CalculateLuckValue">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("'Lucky' furniture with id {0} exceeded the unlockables list size; skipping", this.furniturePlacedAtQuotaStart[var_2]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Luck calculated: {0}", this.luckValue))</LogCall>
      </Method>
      <Method name="SetNewProfitQuota">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Randomizer amount before: {0}", var_1))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Randomizer amount after: {0}", var_1))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Amount to increase quota:{0}", var_0))</LogCall>
      </Method>
    </Class>
    <Class name="AnimatedObjectTrigger">
      <Method name="TriggerAnimation">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Triggering animated object trigger bool: setting to {0}", this.boolValue == 0))</LogCall>
      </Method>
    </Class>
    <Class name="BreakerBox">
      <Method name="SetSwitchesOff">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Could not find round manager from breaker box script!")</LogCall>
        <LogCall status="Default">Debug.Log("switch was already turned off")</LogCall>
      </Method>
    </Class>
    <Class name="EnemyAI">
      <Method name="UseNestSpawnObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Enemy {0} #{1} destroying nest object '{2}'", this.gameObject.name, this.thisEnemyIndex, nestSpawnObject.gameObject))</LogCall>
      </Method>
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error when initializing enemy variables for {0} : {1}", this.gameObject.name, var_1))</LogCall>
      </Method>
      <Method name="MeetsStandardPlayerCollisionConditions">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Player is not targetable")</LogCall>
      </Method>
      <Method name="OnCollideWithPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Collided with player!"))</LogCall>
      </Method>
      <Method name="OnCollideWithEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, " collided with enemy!: ", other.gameObject.name))</LogCall>
      </Method>
      <Method name="CheckLineOfSightForClosestPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("{0} #{1}: LOS check for player #{2} hit an object: {3}, {4}, {5}; {6}", [this.enemyType.enemyName, this.thisEnemyIndex, var_4, this.raycastHit.point, this.raycastHit.collider.gameObject.name, this.raycastHit.collider.transform.gameObject.name, this.raycastHit.collider.name]), this.raycastHit.collider.gameObject)</LogCall>
      </Method>
      <Method name="StartCalculatingNextTargetNode">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Calculating next target node")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Is calculate node coroutine null? : {0}; choseTargetNode: {1}", this.chooseTargetNodeCoroutine == null, this.currentSearch.choseTargetNode))</LogCall>
        <LogCall status="Default">Debug.Log("NODE A")</LogCall>
        <LogCall status="Default">Debug.Log("NODE B")</LogCall>
      </Method>
      <Method name="PlayerIsTargetable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Targetable A")</LogCall>
      </Method>
      <Method name="PathIsIntersectedByLineOfSight">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Path could not be calculated")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Path is not complete; final waypoint of path was too far from target position: {0}", targetPos))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Distance between corners {0} and {1} under 3 meters; skipping LOS check", var_2, var_2 - 1))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}: The path is blocked by line of sight at corner {1}", this.enemyType.enemyName, var_2))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Distance between corners {0} and {1} under 3 meters; skipping LOS check", var_3, var_3 - 1))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}: The path is blocked by line of sight at corner {1}", this.enemyType.enemyName, var_3))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat(this.enemyType.enemyName, ": Reached corner 15, stopping checks now"))</LogCall>
      </Method>
      <Method name="GetPathDistance">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("GetPathDistance: Path could not be calculated")</LogCall>
        <LogCall status="Default">Debug.Log("GetPathDistance: Path is not complete; final waypoint of path was too far from target position")</LogCall>
      </Method>
      <Method name="KillEnemyOnOwnerClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Kill enemy called! destroy: {0}", var_0))</LogCall>
        <LogCall status="Default">Debug.Log("Kill enemy called on server, destroy true")</LogCall>
      </Method>
      <Method name="KillEnemyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Kill enemy server rpc called with destroy {0}", destroy))</LogCall>
      </Method>
      <Method name="KillEnemyClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Kill enemy client rpc called; {0}", destroy))</LogCall>
      </Method>
      <Method name="KillEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall obsolete="true" status="Default">Debug.Log(String.Format("Kill enemy called; destroy: {0}", destroy))</LogCall>
        <LogCall status="Default">Debug.Log("Despawn network object in kill enemy called!")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("enemy did not have bool in animator in KillEnemy, error returned; {0}", var_1))</LogCall>
        <LogCall status="Default">Debug.Log("Destroy enemy called")</LogCall>
      </Method>
      <Method name="UpdateEnemyRotationServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="UpdateEnemyPositionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ChangeOwnershipOfEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Switching ownership of {0} #{1} to player #{2} ({3})", [this.enemyType.name, this.thisEnemyIndex, var_0, StartOfRound.Instance.allPlayerScripts[var_0].playerUsername]))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Attempted to switch ownership of enemy {0} to a player which does not have a link between client id and player object. Attempted clientId: {1}", this.gameObject.name, newOwnerClientId))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("unable to set owner of {0} #{1} to player #{2}; reason B; {3}", [this.enemyType.name, this.thisEnemyIndex, var_0, this.NetworkObject.OwnerClientId]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("unable to set owner of {0} #{1} to player #{2} with id {3}; current ownerclientId: {4}", [this.enemyType.name, this.thisEnemyIndex, var_0, newOwnerClientId, var_1]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}: setting ownership to {1} from currentownershiponclient {2}", this.enemyType.enemyName, var_0, this.currentOwnershipOnThisClient))</LogCall>
      </Method>
      <Method name="HitFromExplosion">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("{0} #{1} hit by explosion", this.enemyType.enemyName, this.thisEnemyIndex))</LogCall>
      </Method>
      <Method name="HitEnemyOnLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Local client hit enemy {0} #{1} with force of {2}.", this.agent.transform.name, this.thisEnemyIndex, force))</LogCall>
      </Method>
      <Method name="HitEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Enemy #{0} was hit with force of {1}", this.thisEnemyIndex, force))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client #{0} hit enemy {1} with force of {2}.", playerWhoHit.playerClientId, this.agent.transform.name, force))</LogCall>
      </Method>
      <Method name="DaytimeEnemyLeave">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Daytime enemy leave function called"))</LogCall>
      </Method>
      <Method name="LogEnemyError">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("{0} #{1}: {2}", this.enemyType.name, this.thisEnemyIndex, error))</LogCall>
      </Method>
      <Method name="__rpc_handler_3079913705">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_255411420">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="GrabbableObject">
      <Method name="GetItemDataToSave">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("GetItemDataToSave is being called on ", this.itemProperties.itemName, ", which does not have saveItemVariable set true."))</LogCall>
      </Method>
      <Method name="LoadItemSaveData">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("LoadItemSaveData is being called on ", this.itemProperties.itemName, ", which does not have saveItemVariable set true."))</LogCall>
      </Method>
      <Method name="FallToGround">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("dropping item did not get raycast : ", this.gameObject.name))</LogCall>
      </Method>
      <Method name="GrabItemOnClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("GrabItemOnClient was called but player was not the owner.")</LogCall>
      </Method>
      <Method name="UseItemOnClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Can't use item; not owner")</LogCall>
      </Method>
      <Method name="ItemInteractLeftRightOnClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("InteractLeftRight was called but player was not the owner.")</LogCall>
      </Method>
      <Method name="UseUpBatteries">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Use up batteries on local client")</LogCall>
      </Method>
      <Method name="SyncBatteryServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Use up batteries local")</LogCall>
      </Method>
      <Method name="SetScrapValue">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError(String.Concat("Scan node is missing for item!: ", this.gameObject.name))</LogCall>
      </Method>
      <Method name="ActivateItemClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Is being used set to {0} by RPC", onOff))</LogCall>
      </Method>
      <Method name="ChangeOwnershipOfPropServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Failed to transfer ownership of prop to client: {0}", var_0))</LogCall>
      </Method>
      <Method name="EnableItemMeshes">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Concat("DISABLING/ENABLING SKINNEDMESH: ", var_1[var_3].gameObject.name))</LogCall>
      </Method>
      <Method name="__rpc_handler_3484508350">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="GetPhysicsRegionOfDroppedObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("Error: physics region transform does not have network object?: ", var_1.gameObject.name))</LogCall>
      </Method>
    </Class>
    <Class name="InteractTrigger">
      <Method name="StopSpecialAnimation">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Stop special animation on {0}, by {1}; {2}", this.gameObject.name, this.lockedPlayer, GameNetworkManager.Instance.localPlayerController))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Calling stop animation function StopUsing server rpc for player: {0}", GameNetworkManager.Instance.localPlayerController.playerClientId))</LogCall>
        <LogCall status="Default">Debug.Log("Stop special animation F")</LogCall>
        <LogCall status="Default">Debug.Log("Stop special animation G")</LogCall>
      </Method>
    </Class>
    <Class name="ItemDropship">
      <Method name="UntetherVehicleServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="FinishDeliveringVehicleServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Setting position of ropes")</LogCall>
      </Method>
      <Method name="__rpc_handler_2687886787">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3760795501">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="Turret">
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Charging timer is up, setting to firing mode")</LogCall>
        <LogCall status="Default">Debug.Log("hasLineOfSight is false")</LogCall>
      </Method>
      <Method name="TurnTowardsTargetIfHasLOS">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Turret: LOS timer ended on server. checking for new player target")</LogCall>
        <LogCall status="Default">Debug.Log("Turret: Got new player target")</LogCall>
        <LogCall status="Default">Debug.Log("Turret: No new player to target; returning to detection mode.")</LogCall>
      </Method>
    </Class>
    <Class name="RoundManager">
      <Method name="SpawnScrapInLevel">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Anomaly random 0b: {0}", var_12))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Number of scrap to spawn: {0}. minTotalScrapValue: {1}. Total value of items: {2}.", var_0.ScrapToSpawn.Count, this.currentLevel.minTotalScrapValue, var_4))</LogCall>
        <LogCall status="Default">Debug.Log("Error!!!!! Found null element in list ScrapToSpawn. Skipping it.")</LogCall>
        <LogCall obsolete="true" status="Default">Debug.Log(String.Concat("No tiles containing a scrap spawn with item type: ", var_15.CS$&lt;&gt;8__locals1.ScrapToSpawn[var_15.i].itemName))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("No tiles containing a scrap spawn with item type: ", var_17.CS$&lt;&gt;8__locals1.ScrapToSpawn[var_17.i].itemName))</LogCall>
      </Method>
      <Method name="SyncScrapValuesClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("clientRPC scrap values length: {0}", allScrapValue.Count()))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("spawnedScrap amount exceeded allScrapValue!: {0}", spawnedScrap.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Item name: {0}; {1}", var_2.gameObject.name, var_4))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Concat(ex, var_1.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Failed to get networkobject reference for scrap. id: {0}", spawnedScrap[var_3].NetworkObjectId))</LogCall>
      </Method>
      <Method name="SpawnSyncedProps">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Spawning synced props on server. Length: {0}", var_0.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Exception! Unable to sync spawned objects on host; {0}", var_3))</LogCall>
      </Method>
      <Method name="SpawnMapObjects">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("NO SPAWNERS WERE COMPATIBLE WITH THE SPAWNABLE MAP OBJECT: '", this.currentLevel.spawnableMapObjects[var_6].prefabToSpawn.gameObject.name, "'"))</LogCall>
      </Method>
      <Method name="YRotationThatFacesTheFarthestFromPosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Anomaly random yrotation farthest: {0}", var_3))</LogCall>
      </Method>
      <Method name="YRotationThatFacesTheNearestFromPosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Anomaly random yrotation nearest: {0}", var_4))</LogCall>
      </Method>
      <Method name="TurnBreakerSwitchesOff">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Switching breaker switches off")</LogCall>
      </Method>
      <Method name="GenerateNewLevelClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Dungeon finished generating in one frame.")</LogCall>
        <LogCall status="Default">Debug.Log("Now listening to dungeon generator status.")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("This client could not find dungeon generator! scene count: {0}", UnityEngine.SceneManagement.SceneManager.sceneCount))</LogCall>
      </Method>
      <Method name="Generator_OnGenerationStatusChanged">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Dungeon has finished generating on this client after multiple frames")</LogCall>
      </Method>
      <Method name="DespawnPropsAtEndOfRound">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Despawning prop")</LogCall>
        <LogCall obsolete="true" status="Default">Debug.Log(String.Concat("Error/warning: prop '", var_0[var_3].gameObject.name, "' was not spawned or did not have a NetworkObject component! Skipped despawning and destroyed it instead."))</LogCall>
        <LogCall status="Default">Debug.Log("Despawn vehicle")</LogCall>
        <LogCall obsolete="true" status="Default">Debug.LogError(String.Format("Error despawning vehicle: {0}", var_7))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error despawning vehicle: {0}", var_6))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("Error/warning: prop '", var_0[var_9].gameObject.name, "' was not spawned or did not have a NetworkObject component! Skipped despawning and destroyed it instead."))</LogCall>
      </Method>
      <Method name="UnloadSceneObjectsEarly">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Despawning props and enemies #3")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Enemies on map: {0}", var_0.Count()))</LogCall>
        <LogCall status="Default">Debug.Log("despawn enemies on map")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0} was not spawned on network, so it could not be removed.", var_0[var_3].thisNetworkObject))</LogCall>
        <LogCall status="Default">Debug.Log("despawn nest spawn object")</LogCall>
      </Method>
      <Method name="FinishGeneratingNewLevelServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="FinishGeneratingNewLevelClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Error caught when predicting outside enemies: {0}", var_0))</LogCall>
      </Method>
      <Method name="SpawnNestObjectForOutsideEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("Error: No NetworkObject found in enemy nest spawn prefab that was just spawned on the host: '", var_3.name, "'"))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Concat("Error: No EnemyAINestSpawnObject component in nest object prefab that was just spawned on the host: '", var_3.name, "'"))</LogCall>
      </Method>
      <Method name="SyncNestSpawnObjectsOrderServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DetectElevatorIsRunning">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Ship is leaving. Despawning props and enemies.")</LogCall>
      </Method>
      <Method name="BeginEnemySpawning">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Not able to spawn enemies on map; no vents were detected or maxEnemyPowerCount is 0.")</LogCall>
      </Method>
      <Method name="SpawnEnemiesOutside">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Cannot spawn more outside enemies: max power count has been reached")</LogCall>
      </Method>
      <Method obsolete="true" name="SpawnRandomWeedEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall obsolete="true" status="Default">Debug.Log(String.Concat("Spawned weed enemy: ", var_4.enemyName))</LogCall>
      </Method>
      <Method name="SpawnRandomOutsideEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Spawned enemy: ", var_6.enemyName))</LogCall>
      </Method>
      <Method name="PositionWithDenialPointsChecked">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Spawn points array was null in denial points check function!")</LogCall>
      </Method>
      <Method name="LogEnemySpawnTimes">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Stopped assigning enemies to vents early as there was no enemy with a power count low enough to fit.")</LogCall>
        <LogCall status="Default">Debug.Log("Enemy spawn times:")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("time {0}: {1}", var_0, this.enemySpawnTimes[var_0]))</LogCall>
      </Method>
      <Method name="AssignRandomEnemyToVent">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Round manager: No more spawnable enemies. Power count: {0} Max: {1}", this.currentLevel.maxEnemyPowerCount, this.currentLevel.maxEnemyPowerCount))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("ADDING ENEMY #{0}: {1}", var_2, this.currentLevel.Enemies[var_2].enemyType.enemyName))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Adding {0} to power level, enemy: {1}", this.currentLevel.Enemies[var_2].enemyType.PowerLevel, this.currentLevel.Enemies[var_2].enemyType.enemyName))</LogCall>
        <LogCall status="Default">Debug.Log("RoundManager is catching up to current time! Not syncing vent SFX with clients since enemy will spawn from vent almost immediately.")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("enemy rush index is {0}; current index {1}", this.enemyRushIndex, var_3))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Probability: {0}; enemy type: {1}", var_4, var_1.enemyName))</LogCall>
      </Method>
      <Method name="SpawnEnemyFromVent">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Spawned enemy from vent")</LogCall>
      </Method>
      <Method name="SpawnEnemyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DespawnEnemyGameObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Despawning enemy")</LogCall>
        <LogCall status="Default">Debug.LogError("Round manager despawn enemy gameobject: Could not get network object from reference!")</LogCall>
      </Method>
      <Method name="PowerSwitchOffClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Calling power switch off event from roundmanager")</LogCall>
      </Method>
      <Method name="SpawnInsideEnemiesFromVentsIfReady">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(["Found enemy vent which has its time up: ", this.allEnemyVents[var_0].gameObject.name, ". Spawning ", this.allEnemyVents[var_0].enemyType.enemyName, " from vent."]))</LogCall>
      </Method>
      <Method name="AdvanceHourAndSpawnNewBatchOfEnemies">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Min enemy spawn chance per hour set to 1!!!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Could not spawn more enemies; vents #: {0}. CannotSpawnMoreInsideEnemies: {1}", this.allEnemyVents.Count(), this.cannotSpawnMoreInsideEnemies))</LogCall>
      </Method>
      <Method name="SetPowerOffAtStart">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Turning lights off at start")</LogCall>
        <LogCall status="Default">Debug.Log("Turning lights on at start")</LogCall>
      </Method>
      <Method name="SetLockedDoors">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Main entrance teleport was not spawned on local client within 12 seconds. Locking doors based on origin instead.")</LogCall>
      </Method>
      <Method obsolete="true" name="DestroyTreeAtPosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall obsolete="true" status="Default">Debug.Log(String.Format("Trees found: {0}", var_0))</LogCall>
      </Method>
      <Method name="LightningStrikeServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ShowStaticElectricityWarningServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="GetRandomNavMeshPositionInRadius">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Unable to get random nav mesh position in radius! Returning old pos")</LogCall>
      </Method>
      <Method name="FindMainEntranceScript">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Main entrance was not spawned and could not be found; returning null")</LogCall>
        <LogCall status="Default">Debug.LogError("Main entrance script could not be found. Returning first entrance teleport script found.")</LogCall>
      </Method>
      <Method name="FindMainEntrancePosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Main entrance position could not be found. Returning origin.")</LogCall>
      </Method>
      <Method name="GetRandomWeightedIndex">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Could not get random weighted index; array is empty or null.")</LogCall>
        <LogCall status="Default">Debug.LogError("Error while calculating random weighted index. Choosing randomly. Weights given:")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("{0},", weights[var_1]))</LogCall>
      </Method>
      <Method name="GetRandomWeightedIndexList">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Could not get random weighted index; array is empty or null.")</LogCall>
        <LogCall status="Default">Debug.LogError("Error while calculating random weighted index.")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("{0},", weights[var_1]))</LogCall>
      </Method>
      <Method name="__rpc_handler_710372063">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_988261632">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_46494176">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1145714957">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_445397880">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="TurnSnowmanServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2148210082">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="ShipBuildModeManager">
      <Method name="PlayerMeetsConditionsToBuild">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Could not build 1")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 2")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 3")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 4")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 5")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 6")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 7")</LogCall>
        <LogCall status="Default">Debug.Log("Could not build 7b")</LogCall>
      </Method>
      <Method name="PlaceShipObjectServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Error! Object was in storage on server. object id: {0}; name: {1}", var_0.NetworkObjectId, var_0.gameObject.name))</LogCall>
      </Method>
      <Method name="PlaceShipObjectClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Error! Could not get network object with id: {0} in placeshipobjectClientRpc", objectRef.NetworkObjectId))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Error! Object was in storage on client. object id: {0}; name: {1}", var_0.NetworkObjectId, var_0.gameObject.name))</LogCall>
      </Method>
      <Method name="StoreObjectLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DISABLE OBJECT C")</LogCall>
      </Method>
      <Method name="StoreObjectServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DISABLE OBJECT D")</LogCall>
      </Method>
      <Method name="StoreShipObjectClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DISABLE OBJECT E")</LogCall>
      </Method>
      <Method name="PlaceShipObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Saving placed position as: {0}", placementPosition))</LogCall>
      </Method>
    </Class>
    <Class name="SpawnPropOnDoorwayPair">
      <Method name="CanTilesConnect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("got tile: {0}", tileA.gameObject), tileA.gameObject)</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("got doorway! {0}; {1}; {2}", doorwayA, doorwayA.name, doorwayA.gameObject), doorwayA.gameObject)</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("got doorway B! {0}; {1}; {2}", doorwayB, doorwayB.name, doorwayB.gameObject))</LogCall>
      </Method>
    </Class>
    <Class name="StartMatchLever">
      <Method name="PullLeverAnim">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Lever animation: setting bool to {0}", leverPulled))</LogCall>
      </Method>
      <Method name="PlayLeverPullEffectsClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Sent lever animation RPC on this client")</LogCall>
      </Method>
      <Method name="StartGame">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Attempted to start the game while routing to a new planet")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Number of loaded players: {0}", this.playersManager.fullyLoadedPlayers))</LogCall>
      </Method>
    </Class>
    <Class name="DiscordController">
      <Method name="&lt;UpdateStatus&gt;b__23_0">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogWarning("Error while updating Discord activity status!")</LogCall>
      </Method>
    </Class>
    <Class name="GameNetworkManager">
      <Method name="Awake">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("The compatible file cutoff version was higher than the game version number. This should not happen!!")</LogCall>
      </Method>
      <Method name="GetWeekNumber">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Unable to get UTC time; defaulting to system date time; {0}", var_2))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format(ex, var_1 - var_0.TotalDays / 7))</LogCall>
      </Method>
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Facepunch transport is disabled.")</LogCall>
      </Method>
      <Method name="OnEnable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("subcribing to steam callbacks")</LogCall>
      </Method>
      <Method name="OnDisable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("unsubscribing from steam callbacks")</LogCall>
      </Method>
      <Method name="ConnectionApproval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Connection approval callback! Game version of client request: ", System.Text.Encoding.ASCII.GetString(request.Payload).ToString()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Joining client id: {0}; Local/host client id: {1}", request.ClientNetworkId, Unity.Netcode.NetworkManager.Singleton.LocalClientId))</LogCall>
        <LogCall status="Default">Debug.Log("Stopped connection approval callback, as the client in question was the host!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Approved connection?: {0}. Connected players #: {1}", var_0, GameNetworkManager.Instance.connectedPlayers))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("Disapproval reason: ", response.Reason))</LogCall>
      </Method>
      <Method name="Singleton_OnClientDisconnectCallback">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Disconnect callback called")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Is server: {0}; ishost: {1}; isConnectedClient: {2}", Unity.Netcode.NetworkManager.Singleton.IsServer, Unity.Netcode.NetworkManager.Singleton.IsHost, Unity.Netcode.NetworkManager.Singleton.IsConnectedClient))</LogCall>
        <LogCall status="Default">Debug.Log("Network singleton is null!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Disconnect callback called in gamenetworkmanager; disconnecting clientId: {0}", clientId))</LogCall>
        <LogCall status="Default">Debug.Log("A Player disconnected but they were not in clientplayerlist")</LogCall>
        <LogCall status="Default">Debug.Log("Disconnect callback called for local client; ignoring.")</LogCall>
        <LogCall status="Default">Debug.Log("Disconnect callback from networkmanager in gamenetworkmanager")</LogCall>
      </Method>
      <Method name="OnLocalClientConnectionDisapproved">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Local client connection denied; clientId: {0}; reason: {1}", clientId, this.disconnectionReasonMessage.ToString()))</LogCall>
        <LogCall status="Default">Debug.Log("Calling shutdown(true) on server in OnLocalClientDisapproved")</LogCall>
      </Method>
      <Method name="Singleton_OnClientConnectedCallback">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Client connected callback in gamenetworkmanager")</LogCall>
      </Method>
      <Method name="SteamFriends_OnGameLobbyJoinRequested">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("JOIN REQUESTED through steam invite")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("lobby id: {0}", lobby.Id))</LogCall>
        <LogCall status="Default">Debug.Log("Attempted to join by Steam invite request, but already in a lobby.")</LogCall>
      </Method>
      <Method name="LobbyDataIsJoinable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Lobby join denied! Attempted to join vers.{0} lobby id: {1}", var_0, lobby.Id))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("blocked users {0}: {1}; id: {2}", var_2, var_1[var_2].Name, var_1[var_2].Id))</LogCall>
        <LogCall status="Default">Debug.Log("Blocked users list is null")</LogCall>
        <LogCall status="Default">Debug.Log("Lobby join denied! Host lobby is not joinable")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Lobby join denied! Too many members in lobby! {0}", lobby.Id))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Lobby join accepted! Lobby id {0} is OK", lobby.Id))</LogCall>
      </Method>
      <Method name="SteamMatchmaking_OnLobbyMemberJoined">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Player joined w steamId: {0}", friend.Id))</LogCall>
      </Method>
      <Method name="SteamMatchmaking_OnLobbyInvite">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("You got invited by {0} to join {1}", friend.Name, lobby.Id))</LogCall>
      </Method>
      <Method name="SteamMatchmaking_OnLobbyCreated">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Lobby could not be created! {0}", result), this)</LogCall>
        <LogCall status="Default">Debug.Log("Lobby has been created")</LogCall>
      </Method>
      <Method name="LeaveLobbyAtGameStart">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Current lobby is null. (Attempted to close lobby at game start)")</LogCall>
      </Method>
      <Method name="SetLobbyJoinable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Current lobby is null. (Attempted to set lobby joinable {0}.)", joinable))</LogCall>
      </Method>
      <Method name="OnApplicationQuit">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error while disconnecting: {0}", var_0))</LogCall>
      </Method>
      <Method name="Disconnect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Server is not active; quitting to main menu")</LogCall>
      </Method>
      <Method name="StartDisconnect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Leaving current lobby")</LogCall>
        <LogCall status="Default">Debug.Log("Disconnecting and setting networkobjects to destroy with owner")</LogCall>
      </Method>
      <Method name="ResetUnlockablesListValues">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Resetting unlockables list!")</LogCall>
      </Method>
      <Method name="SaveLocalPlayerValues">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("ERROR occured while saving local player values!: {0}", var_0))</LogCall>
      </Method>
      <Method name="SaveGameValues">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Saved challenge score as {0}; total scrap in level: {1}", StartOfRound.Instance.scrapCollectedLastRound, RoundManager.Instance.totalScrapValueInLevel))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("saved vehicle: {0}", var_5))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while trying to save game values when disconnecting as host: {0}", var_8))</LogCall>
      </Method>
      <Method name="SaveItemsInShip">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("Item '", var_0[var_6].itemProperties.itemName, "' has no spawn prefab set!"))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("An error occured while getting item data to save for item type: {0}; gameobject '{1}'", var_0[var_6].itemProperties, var_0[var_6].gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Saved data for item type: {0} - {1}", var_0[var_6].itemProperties.itemName, var_5))</LogCall>
        <LogCall status="Default">Debug.Log("Got no ship grabbable items to save.")</LogCall>
      </Method>
      <Method name="ConvertUnsellableItemsToCredits">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Players disconnected, but they were not in ship phase so they can't be reimbursed for their items.")</LogCall>
      </Method>
      <Method name="LeaveCurrentSteamLobby">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Error caught while attempting to leave current lobby!: {0}", var_2))</LogCall>
      </Method>
      <Method name="SetConnectionDataBeforeConnecting">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Game version: ", GameNetworkManager.Instance.gameVersionNum.ToString()))</LogCall>
      </Method>
      <Method name="StartClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("CC {0}", id))</LogCall>
        <LogCall status="Default">Debug.Log("started client!")</LogCall>
        <LogCall status="Default">Debug.Log("Joined steam lobby successfully, but connection failed")</LogCall>
        <LogCall status="Default">Debug.Log("Leaving steam lobby")</LogCall>
      </Method>
    </Class>
    <Class name="GlobalEffects">
      <Method name="PlayAnimationClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogWarning(String.Concat("Was not able to retrieve NetworkObject from NetworkObjectReference; string ", serverAnimation.animationString))</LogCall>
      </Method>
      <Method name="PlayAudioClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogWarning("Was not able to retrieve NetworkObject from NetworkObjectReference; audio")</LogCall>
      </Method>
    </Class>
    <Class name="MenuManager">
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("file vers: {0} not compatible; {1}", ES3.Load("FileGameVers", var_3, 0), GameNetworkManager.Instance.compatibleFileCutoffVersion))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error loading file #{0}! Deleting file since it's likely corrupted. Error: {1}", var_6, var_7))</LogCall>
      </Method>
      <Method name="SetIfChallengeMoonHasBeenCompleted">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("week num: {0}", var_0))</LogCall>
        <LogCall status="Default">Debug.Log("Set challenge moon completed A")</LogCall>
        <LogCall status="Default">Debug.Log("Set challenge moon completed B")</LogCall>
      </Method>
      <Method name="SetLoadingScreen">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Displaying menu message")</LogCall>
        <LogCall status="Default">Debug.Log("Displaying menu message 2")</LogCall>
        <LogCall status="Default">Debug.Log("Displaying menu message 3")</LogCall>
        <LogCall status="Default">Debug.Log("Failed loading; displaying notification")</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("result: ", result.ToString()))</LogCall>
      </Method>
      <Method name="DisplayMenuNotification">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Displaying menu notification: ", notificationText))</LogCall>
      </Method>
      <Method name="StartAClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Started a client")</LogCall>
        <LogCall status="Default">Debug.Log("Could not start client")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Connection failed: {0}", var_0))</LogCall>
      </Method>
      <Method name="StartHosting">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("started host!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("are we in a server?: {0}", Unity.Netcode.NetworkManager.Singleton.IsServer))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Server connection failed: {0}", var_0))</LogCall>
      </Method>
      <Method name="ClickHostButton">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("host button pressed")</LogCall>
      </Method>
      <Method name="LAN_HostSetLocal">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Clicked local connection only")</LogCall>
      </Method>
      <Method name="LAN_HostSetAllowRemoteConnections">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Clicked allow remote connections")</LogCall>
      </Method>
      <Method name="ClickJoinButton">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("join button pressed")</LogCall>
      </Method>
    </Class>
    <Class name="SteamLobbyManager">
      <Method name="DebugLogServerList">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Lobby #{0} id: {1}; members: {2}", var_0, this.currentLobbyList[var_0].Id, this.currentLobbyList[var_0].MemberCount))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Is lobby #{0} valid?: {1}", var_0, this.currentLobbyList[var_0].GetGameServer(var_1, var_2, var_3)))</LogCall>
        <LogCall status="Default">Debug.Log("Server list null")</LogCall>
      </Method>
    </Class>
    <Class name="StartOfRound">
      <Method name="SceneManager_OnLoad">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Loading scene")</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("Scene that began loading: ", sceneName))</LogCall>
      </Method>
      <Method name="OnEnable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Enabling connection callbacks in StartOfRound")</LogCall>
        <LogCall status="Default">Debug.Log("Began listening to SceneManager_OnLoadComplete1 on this client")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error returned when subscribing to scenemanager callbacks!: {0}", var_0))</LogCall>
      </Method>
      <Method name="OnDisable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DISABLING connection callbacks in round manager")</LogCall>
      </Method>
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(1107298560)</LogCall>
        <LogCall status="Default">Debug.Log(this.collidersAndRoomMask)</LogCall>
      </Method>
      <Method name="BuyShipUnlockableServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Purchasing ship unlockable on host: {0}", unlockableID))</LogCall>
        <LogCall status="Default">Debug.Log("Unlockable was already unlocked! Setting group credits back to server's amount on all clients.")</LogCall>
      </Method>
      <Method name="UnlockShipObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set unlockable #{0}: {1}, to unlocked!", unlockableID, this.unlockablesList.unlockables[unlockableID].unlockableName))</LogCall>
      </Method>
      <Method name="LoadAttachedVehicle">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Loaded vehicle ID: {0}", var_0))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Saved Vehicle ID of {0} was larger than the vehicles array length. you buffoon", var_0))</LogCall>
      </Method>
      <Method name="LoadUnlockables">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DISABLE OBJECT A")</LogCall>
        <LogCall obsolete="true" status="Default">Debug.LogError(String.Format("Error attempting to load ship unlockables on the host: {0}", var_5))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error attempting to load ship unlockables on the host: {0}", var_6))</LogCall>
      </Method>
      <Method name="SpawnUnlockable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Placing scene object at saved position: ", this.unlockablesList.unlockables[unlockableIndex].unlockableName))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Loading placed object position as: {0}", var_5))</LogCall>
      </Method>
      <Method name="SyncSuitsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="LoadShipGrabbableItems">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Key 'shipGrabbableItems' does not exist")</LogCall>
        <LogCall status="Default">Debug.LogError("Ship items list loaded from file returns a null value!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Ship grabbable items list loaded. Count: {0}", var_1.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Setting scrap value for item: {0}: {1}", var_0.gameObject.name, var_4[var_7]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Loading item save data for item: {0}: {1}", var_0.gameObject, var_5[var_8]))</LogCall>
      </Method>
      <Method name="OnLocalDisconnect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Scene manager is null")</LogCall>
      </Method>
      <Method name="OnClientDisconnect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Disconnection callback called for a client id which isn't in ClientPlayerList; ignoring. This is likely due to an unapproved connection.")</LogCall>
        <LogCall status="Default">Debug.Log("Disconnect callback called for local client; ignoring.")</LogCall>
        <LogCall status="Default">Debug.Log("Client disconnected from server")</LogCall>
        <LogCall status="Default">Debug.LogError("Could not get player object number from client id on disconnect!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("player disconnected c; {0}", clientId))</LogCall>
        <LogCall status="Default">Debug.Log(this.ClientPlayerList.Count)</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("client id: {0} ; player object id: {1}", var_3, var_4))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("disconnecting client id: {0}", clientId))</LogCall>
        <LogCall status="Default">Debug.Log("Host disconnected!")</LogCall>
        <LogCall status="Default">Debug.Log(GameNetworkManager.Instance.isDisconnecting)</LogCall>
        <LogCall status="Default">Debug.Log("Host quit! Ending game for client.")</LogCall>
      </Method>
      <Method name="OnPlayerDC">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Calling OnPlayerDC!")</LogCall>
        <LogCall status="Default">Debug.Log("disconnect: clientId key already removed!")</LogCall>
        <LogCall status="Default">Debug.Log("OnPlayerDC: Local client is disconnecting so return.")</LogCall>
        <LogCall status="Default">Debug.Log("Shutdown is in progress, returning")</LogCall>
        <LogCall status="Default">Debug.Log("Player DC'ing 2")</LogCall>
        <LogCall status="Default">Debug.Log("Player DC'ing 3")</LogCall>
        <LogCall status="Default">Debug.Log("Teleporting disconnected player out")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Current players after dc: {0}", this.connectedPlayersAmount))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while handling player disconnect!: {0}", var_3))</LogCall>
      </Method>
      <Method name="OnClientConnect">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("player connected")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("connected players #: {0}", this.connectedPlayersAmount))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Connecting new player on host; clientId: {0}", clientId))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("New player assigned object id: {0}", this.allPlayerObjects[var_1]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("client id connecting: {0} ; their corresponding player object id: {1}", clientId, var_1))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error occured in OnClientConnected! Shutting server down. clientId: {0}. Error: {1}", clientId, var_10))</LogCall>
      </Method>
      <Method name="OnPlayerConnectedClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("NEW CLIENT JOINED THE SERVER!!; clientId: {0}", clientId))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Skipping at index {0}", var_3))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("adding value to ClientPlayerList at value of index {0}: {1}", var_3, connectedPlayerIdsOrdered[var_3]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Successfully added new client id {0} and connected to object {1}", clientId, assignedPlayerObjectId))</LogCall>
        <LogCall status="Default">Debug.Log("ClientId already in ClientPlayerList!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("clientplayerlist count for client: {0}", this.ClientPlayerList.Count))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("New player: ", this.allPlayerObjects[assignedPlayerObjectId].name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Connected players (joined clients) amount after connection: {0}", this.connectedPlayersAmount))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Asking server to sync already-held objects. Our client id: {0}", Unity.Netcode.NetworkManager.Singleton.LocalClientId))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("This client is not the client who just joined. Our client id: {0}; joining client id: {1}", Unity.Netcode.NetworkManager.Singleton.LocalClientId, clientId))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Failed to assign new player with client id #{0}: {1}", clientId, var_7))</LogCall>
      </Method>
      <Method name="SyncAlreadyHeldObjectsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Syncing already-held objects on server")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Object #{0} is held", var_6))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Item slot index for item #{0}: {1}", var_6, var_7))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Object #{0} is pocketed", var_6))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("pocketed objects count: {0}", var_4.Count))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("held objects count: {0}", var_1.Count))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing players' already held objects in server! Skipping. Error: {0}", var_9))</LogCall>
      </Method>
      <Method name="SyncAlreadyHeldObjectsClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Syncing already-held objects on client")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("held objects count: {0}", gObjects.Count()))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("pocketed objects count: {0}", isObjectPocketed.Count()))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("isObjectPocketed length: {0}", isObjectPocketed.Count()))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("iii {0}", var_2))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("bbb {0} ; {1}", var_4, isObjectPocketed[var_4]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("Pocketing object for player: ", this.allPlayerScripts[playersHeldBy[var_2]].gameObject.name))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Syncing already held objects: Unable to get network object from reference for GObject; net object id: {0}", gObjects[var_2].NetworkObjectId))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing players' already held objects to client from server: {0}", var_5))</LogCall>
      </Method>
      <Method name="SyncShipUnlockablesServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Server: objects in ship: {0}", var_5.Count()))</LogCall>
        <LogCall status="Default">Debug.Log("Attempted to sync more than 175 unlockables which is not allowed")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Server: placeableObject #{0}: {1}", var_11, var_5[var_11].parentObject.transform.name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Server: position #{0}: {1}", var_11, this.unlockablesList.unlockables[var_5[var_11].unlockableID].placedPosition))</LogCall>
        <LogCall status="Default">Debug.Log("Attempted to sync more than 500 scrap values which is not allowed")</LogCall>
        <LogCall obsolete="true" status="Default">Debug.LogError(String.Format("Error while syncing unlockables in server. Quitting server: {0}", var_13))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing unlockables in server. Quitting server: {0}", var_14))</LogCall>
      </Method>
      <Method name="PositionSuitsOnRack">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Suits: {0}", var_0.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Suit #{0}: {1}", var_2, var_0[var_2].suitID))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("pos: {0}; rot: {1}", var_1.positionOffset, var_1.rotationOffset))</LogCall>
      </Method>
      <Method name="SyncShipUnlockablesClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Error while attempting to sync item save data from host: {0}", var_3))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing scrap objects to this client from server: {0}", var_8))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client: placeableObject #{0}: {1}", var_12, var_10[var_12].parentObject.transform.name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client: position #{0}: {1}", var_12, placeableObjectPositions[var_12]))</LogCall>
        <LogCall status="Default">Debug.Log("DISABLE OBJECT B")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing unlockables in ship to this client from server: {0}", var_13))</LogCall>
        <LogCall status="Default">Debug.LogError(ex)</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Error while syncing player suit materials from server to client: {0}", var_17))</LogCall>
      </Method>
      <Method name="StartTrackingAllPlayerVoices">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Starting voice tracking for player: ", this.allPlayerScripts[var_0].playerUsername))</LogCall>
      </Method>
      <Method name="StartGame">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("RANDOM MAP SEED: {0}", this.randomMapSeed))</LogCall>
        <LogCall status="Default">Debug.Log("LOADING GAME!!!!!")</LogCall>
        <LogCall status="Default">Debug.Log("Attempted to start game on server but we are not in ship phase")</LogCall>
      </Method>
      <Method name="ManuallyEjectPlayersServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ResetShip">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Reset ship 0")</LogCall>
      </Method>
      <Method name="ResetShipFurniture">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Resetting ship furniture")</LogCall>
      </Method>
      <Method name="LoadPlanetsMoldSpreadData">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Loading from data: for {0}: iterations at {1}, starting at node #{2}", this.levels[var_2].PlanetName, var_0, var_1))</LogCall>
      </Method>
      <Method name="SetPlanetsMold">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Increasing level #{0} {1} mold iterations by 1; risen to {2}", var_3, this.levels[var_3].PlanetName, this.levels[var_3].moldSpreadIterations))</LogCall>
      </Method>
      <Method name="SetPlanetsWeather">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Weather chance: {0}; {1}", var_3, var_2))</LogCall>
      </Method>
      <Method name="ReviveDeadPlayers">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Reviving players A")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players B")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players C")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players D")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players E")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players E2")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players F")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players G")</LogCall>
        <LogCall status="Default">Debug.Log("Reviving players H")</LogCall>
      </Method>
      <Method name="RefreshPlayerVoicePlaybackObjects">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Refreshing voice playback objects. Number of voice objects found: {0}", var_0.Count()))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Skipping player #{0} as they are not controlled or dead", var_2))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Unable to connect player to voice B #{0}; {1}; {2}", var_2, var_0[var_3].isActiveAndEnabled, var_0[var_3]._playerState == null))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Unable to connect player to voice A #{0}; {1}; {2}", var_2, var_0[var_3].isActiveAndEnabled, var_0[var_3]._playerState == null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Found a match for voice object #{0} and player object #{1}", var_3, var_2))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("player voice chat audiosource: {0}; set audiomixer to {1} ; {2} ; {3}", [var_1.currentVoiceChatAudioSource, SoundManager.Instance.playerVoiceMixers[var_1.playerClientId], var_1.currentVoiceChatAudioSource.outputAudioMixerGroup, var_1.playerClientId]))</LogCall>
      </Method>
      <Method name="UpdatePlayerVoiceEffects">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Was not able to access voice chat object for player #{0}; {1}; {2}", var_3, var_1.voicePlayerState == null, var_1.currentVoiceChatAudioSource == null))</LogCall>
      </Method>
      <Method name="SetShipDoorsOverheatServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ChangeLevelServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Changing level server rpc {0}", levelID))</LogCall>
      </Method>
      <Method name="ChangeLevel">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("level id: {0}", levelID))</LogCall>
        <LogCall status="Default">Debug.Log("Changing level")</LogCall>
      </Method>
      <Method name="ArriveAtLevel">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Level id: {0}", this.currentLevel.levelID))</LogCall>
      </Method>
      <Method name="Debug_EnableTestRoomServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="IsClientFriendsWithHost">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Host steam friend id: {0}, user: {1}; is friend?: {2}", this.allPlayerScripts[0].playerSteamId, var_0.Name, var_0.IsFriend))</LogCall>
      </Method>
      <Method name="Debug_ToggleAllowDeathServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Debug_ReviveAllPlayersServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1846610026">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1482204640">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2578118202">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3050994254">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3186641109">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2339227601">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="CentipedeAI">
      <Method name="RaycastToCeiling">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Centipede: Raycast to ceiling failed. Setting different node offset and resuming search for a hiding spot.")</LogCall>
      </Method>
      <Method name="SwitchToHidingOnCeilingServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2005305321">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="CrawlerAI">
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Crawler: Started new search; is searching?: {0}", this.searchForPlayers.inProgress))</LogCall>
        <LogCall status="Default">Debug.Log("Crawler: Lost player in chase; beginning search where the player was last seen")</LogCall>
        <LogCall status="Default">Debug.Log("Crawler: Found player during chase; stopping search coroutine and moving after target player")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Begin chasing on local client")</LogCall>
        <LogCall status="Default">Debug.Log("Crawler: Eat player body start")</LogCall>
      </Method>
    </Class>
    <Class name="RedLocustBees">
      <Method name="SpawnHiveClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set targetfloorposition of hive: {0}", hivePosition))</LogCall>
        <LogCall status="Default">Debug.LogError("Bees: Error! Hive could not be accessed from network object reference")</LogCall>
      </Method>
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Bee10 switching owner to ", var_2.playerUsername))</LogCall>
      </Method>
      <Method name="BeesZapOnTimer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Setting bee zap mode to {0} at end of zapping mode 3", this.currentBehaviourState))</LogCall>
      </Method>
      <Method name="EnterAttackZapModeClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Entered zap mode 3")</LogCall>
      </Method>
    </Class>
    <Class name="DressGirlAI">
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DISABLING ENEMY MESH!!!!!!!!!!!")</LogCall>
      </Method>
      <Method name="ChoosePlayerToHaunt">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Little girl: Haunting player with playerClientId: {0}; actualClientId: {1}", this.hauntingPlayer.playerClientId, this.hauntingPlayer.actualClientId))</LogCall>
      </Method>
      <Method name="MessWithLightsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="FlipLightsBreakerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="FindPositionOutOfLOS">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Girl: Found hide position with raycast")</LogCall>
        <LogCall status="Default">Debug.Log("Girl: Found hide position with AI nodes")</LogCall>
        <LogCall status="Default">Debug.Log("Girl: Unable to find a location to hide away; vanishing instead")</LogCall>
      </Method>
      <Method name="TryFindingHauntPosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Player distance to haunt position: {0}", Vector3.Distance(this.hauntingPlayer.transform.position, this.allAINodes[var_0].transform.position)))</LogCall>
      </Method>
      <Method name="SetHauntStarePosition">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Girl: STARTING HAUNT STARE")</LogCall>
        <LogCall status="Default">Debug.Log("girL: Playing sound")</LogCall>
      </Method>
      <Method name="OnCollideWithPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Girl: collided with player")</LogCall>
        <LogCall status="Default">Debug.Log("Girl: collided with player who cannot see it")</LogCall>
      </Method>
      <Method name="__rpc_handler_1320241094">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_164274866">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="FlowermanAI">
      <Method name="EnterAngerModeServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Flowerman: Dropped player body")</LogCall>
      </Method>
      <Method name="DropPlayerBodyServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_80027368">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2817453984">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="ForestGiantAI">
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Forest giant starting search for players routine")</LogCall>
        <LogCall status="Default">Debug.Log("Lost player in chase; beginning search where the player was last seen")</LogCall>
        <LogCall status="Default">Debug.Log("Found player during chase; stopping search coroutine and moving after target player")</LogCall>
      </Method>
      <Method name="FinishedCurrentSearchRoutine">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Forest giant: Finished search; player not in line of sight, lost player, returning to roaming mode")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("agent speed: {0}", this.agent.speed))</LogCall>
      </Method>
      <Method name="BeginChasingNewPlayerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DetectPlayerVoiceServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_344062384">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1714423781">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="HoarderBugAI">
      <Method name="RefreshGrabbableObjectsInMapList">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("gobjectsin scnee!! : {0}", var_0.Count()))</LogCall>
      </Method>
      <Method name="SyncNestPositionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DoAIInterval">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Abandoned current search and returning to nest empty-handed"))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Lost player in chase; beginning search where the player was last seen"))</LogCall>
        <LogCall status="Default">Debug.LogError("TargetPlayer is null even though bug is in chase; setting targetPlayer to watchingPlayer")</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Found player during chase; stopping search coroutine and moving after target player"))</LogCall>
      </Method>
      <Method name="SetGoTowardsTargetObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Concat(this.gameObject.name, ": Setting target object and going towards it."))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Concat(this.gameObject.name, ": i found an object but cannot reach it (or it has been taken by another bug): ", foundObject.name))</LogCall>
      </Method>
      <Method name="ExitChaseMode">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Exiting chase mode"))</LogCall>
      </Method>
      <Method name="SetReturningToNest">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(this.gameObject.name, ": Return to nest was called, but nest is not accessible! Abandoning and choosing a new nest position."))</LogCall>
      </Method>
      <Method name="DropItemServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DropItemClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat(this.gameObject.name, ": Failed to get network object from network object reference (Drop item RPC)"))</LogCall>
      </Method>
      <Method name="GrabItemServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="GrabItemClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat(this.gameObject.name, ": Failed to get network object from network object reference (Grab item RPC)"))</LogCall>
      </Method>
      <Method name="DropItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Hoarder bug: my held item is null when attempting to drop it!!")</LogCall>
      </Method>
      <Method name="GrabItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat([this.gameObject.name, ": Trying to grab another item (", item.gameObject.name, ") while hands are already full with item (", this.heldItem.itemGrabbableObject.gameObject.name, "). Dropping the currently held one."]))</LogCall>
      </Method>
      <Method name="HitEnemy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("HA")</LogCall>
        <LogCall status="Default">Debug.Log("HB")</LogCall>
        <LogCall status="Default">Debug.Log("HC")</LogCall>
      </Method>
      <Method name="CheckLineOfSightForItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("SEEING PLAYER")</LogCall>
      </Method>
      <Method name="__rpc_handler_3689917697">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3510928244">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2358561451">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="MouthDogAI">
      <Method name="ReactToOtherDogHowl">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Setting lastHeardNoisePosition to {0}", howlPosition))</LogCall>
      </Method>
      <Method name="DetectNoise">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("dog '{0}': Heard noise! Distance: {1} meters", this.gameObject.name, var_0))</LogCall>
      </Method>
      <Method name="EnrageDogOnLocalClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Mouth dog targetPos 1: {0}; distanceToNoise: {1}", targetPosition, distanceToNoise))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Mouth dog targetPos 2: {0}", targetPosition))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Dog lastheardnoisePosition: {0}", this.lastHeardNoisePosition))</LogCall>
      </Method>
      <Method name="EndLungeClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Ending lunge")</LogCall>
      </Method>
      <Method name="KillPlayerClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Kill player rpc")</LogCall>
      </Method>
    </Class>
    <Class name="SpringManAI">
      <Method name="StopOffMeshLinkMovement">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Completed off mesh EARLY link due to an interruption; position: {0}", this.transform.position))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Warping agent to start position at {0}", var_0.startPos))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Warping agent to end position at {0}", var_0.endPos))</LogCall>
        <LogCall status="Default">Debug.Log("Off mesh link data invalid; agent completing off mesh link anyway")</LogCall>
      </Method>
      <Method name="SetAnimationStopServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetAnimationGoServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1502362896">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_339140592">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="FlashlightItem">
      <Method name="PocketItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Could not find what player was holding this flashlight item")</LogCall>
      </Method>
      <Method name="PocketFlashlightServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SwitchFlashlight">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Flashlight click. playerheldby null?: {0}", this.playerHeldBy != null))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Flashlight being disabled or enabled: {0}", on))</LogCall>
      </Method>
      <Method name="__rpc_handler_461510128">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="LockPicker">
      <Method name="ItemActivate">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("discard held object called from lock picker")</LogCall>
      </Method>
      <Method name="PlaceLockPickerClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("Lock picker was placed but we can't get the reference for the door it was placed on; placed by ", this.playerHeldBy.gameObject.name))</LogCall>
      </Method>
      <Method name="PlaceOnDoor">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Playing lock picker audio")</LogCall>
      </Method>
      <Method name="RetractClaws">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("pausing lock picker audio")</LogCall>
      </Method>
    </Class>
    <Class name="LungProp">
      <Method name="EquipItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Lung apparatice was grabbed. Is owner: {0}", this.IsOwner))</LogCall>
      </Method>
    </Class>
    <Class name="PatcherTool">
      <Method name="ItemActivate">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Stop shocking gun")</LogCall>
        <LogCall status="Default">Debug.Log("Start scanning gun")</LogCall>
        <LogCall status="Default">Debug.Log("Use patcher tool")</LogCall>
      </Method>
      <Method name="GunMeetsConditionsToShock">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Target position: {0}", targetPosition))</LogCall>
        <LogCall status="Default">Debug.Log(var_2.transform.name)</LogCall>
        <LogCall obsolete="true" status="Default">Debug.Log(var_2.transform.gameObject.name)</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Gun not meeting conditions to zap; {0}; {1}; {2}", this.gunOverheat &gt; 2, Vector3.Distance(var_0, targetPosition) &lt; 0,7, Physics.Linecast(var_0, targetPosition, StartOfRound.Instance.collidersAndRoomMask, 1)))</LogCall>
      </Method>
      <Method name="StopShockingAnomalyOnClient">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Error: playerHeldBy is null for owner of zap gun when stopping shock, in client rpc")</LogCall>
      </Method>
      <Method name="ShockPatcherToolServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Patcher tool server rpc received")</LogCall>
      </Method>
      <Method name="ShockPatcherToolClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Shock patcher tool client rpc received")</LogCall>
        <LogCall status="Default">Debug.Log("Running shock patcher tool function")</LogCall>
        <LogCall status="Default">Debug.LogError("Zap gun: Unable to get IShockableWithGun interface from networkobject on client rpc!")</LogCall>
      </Method>
      <Method name="StopShockingClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Running client rpc stopping shock")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0} ; {1}", this.IsOwner, this.previousPlayerHeldBy))</LogCall>
      </Method>
      <Method name="PocketItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Could not find what player was holding this item")</LogCall>
      </Method>
    </Class>
    <Class name="Shovel">
      <Method name="ReelUpSFXServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="HitShovel">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Previousplayerheldby is null on this client when HitShovel is called.")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Exception caught when hitting object with shovel from player #{0}: {1}", this.previousPlayerHeldBy.playerClientId, var_14))</LogCall>
      </Method>
      <Method name="HitShovelServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_4113335123">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2096026133">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="WalkieTalkie">
      <Method name="SetLocalClientSpeaking">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Set local client speaking on walkie talkie: {0}", speaking))</LogCall>
      </Method>
      <Method name="SetPlayerSpeakingOnWalkieTalkieServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="UnsetPlayerSpeakingOnWalkieTalkieServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SendWalkieTalkieStartTransmissionSFX">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Walkie talkie A")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Walkie talkie #{0} {1} B", var_0, WalkieTalkie.allWalkieTalkies[var_0].gameObject.name))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("is walkie being used: {0}", WalkieTalkie.allWalkieTalkies[var_0].isBeingUsed))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Walkie talkie #{0}  {1} C", var_0, WalkieTalkie.allWalkieTalkies[var_0].gameObject.name))</LogCall>
      </Method>
      <Method name="PlayerIsHoldingAnotherWalkieTalkie">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("False A")</LogCall>
        <LogCall status="Suppressed">Debug.Log("False B")</LogCall>
        <LogCall status="Suppressed">Debug.Log("False C")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("{0}", walkieTalkie.isPocketed))</LogCall>
      </Method>
      <Method name="PlayWallAudioServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="TimeAllAudioSources">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error while playing audio clip in walkie talkie. Clip name: {0} object: {1}; time: {2}; {3}", [var_3.clip.name, var_3.gameObject.name, var_3.time, var_5]))</LogCall>
      </Method>
      <Method name="__rpc_handler_64994802">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2502573704">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2677586182">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="DeadBodyInfo">
      <Method name="SetPhysicsParent">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("The player physics region '", var_0[var_1].gameObject.name, "' is missing physicsCollider property!"))</LogCall>
      </Method>
    </Class>
    <Class name="ElevatorAnimationEvents">
      <Method name="PlayAudioOneshot">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("elevator running? : {0}", this.roundManager.ElevatorRunning))</LogCall>
      </Method>
      <Method name="ElevatorFullyRunning">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Killing player obj #{0}, they were not in the ship when it left.", GameNetworkManager.Instance.localPlayerController.playerClientId))</LogCall>
      </Method>
    </Class>
    <Class name="EnemyAICollisionDetect">
      <Method name="IHittable.Hit">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Enemy collision detect returned false")</LogCall>
      </Method>
    </Class>
    <Class name="KillLocalPlayer">
      <Method name="KillPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("DD TRIGGER")</LogCall>
      </Method>
    </Class>
    <Class name="Terminal">
      <Method name="LoadNewNode">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("An error occured while post processing terminal text: {0}", var_2))</LogCall>
      </Method>
      <Method name="TextPostProcess">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("isDemo:{0} ; {1}", GameNetworkManager.Instance.isDemo, this.moonsCatalogueList[var_3].lockedForDemo))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Exception occured on terminal while setting node planet info; current node displayPlanetInfo:{0}", node.displayPlanetInfo))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("scanID # {0}: {1}; {2}", var_5, this.scannedEnemyIDs[var_5], this.enemyFiles[this.scannedEnemyIDs[var_5]].creatureName))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("scanID # {0}: {1}", var_5, this.scannedEnemyIDs[var_5]))</LogCall>
      </Method>
      <Method name="OnSubmit">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("load 7")</LogCall>
      </Method>
      <Method name="LoadNewNodeIfAffordable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Is server?: {0}", this.IsServer))</LogCall>
      </Method>
      <Method name="SyncGroupCreditsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ParsePlayerSentence">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Parsed word: ", var_1[var_13]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("Could not parse word: ", var_1[var_13]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("noun keyword: {0} ; verb keyword: {1} ; result null? : {2}", var_5.word, var_4.word, var_4.compatibleNouns[var_14].result == null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("result: ", var_4.compatibleNouns[var_14].result.name))</LogCall>
      </Method>
      <Method name="CheckForPlayerNameCommand">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("first word: ", firstWord, "; second word: ", secondWord))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("name {0}: {1}", var_2, var_0[var_2]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Target names length: {0}", var_0.Count))</LogCall>
        <LogCall status="Default">Debug.Log("A")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Word #{0}: {1}; length: {2}", var_4, var_1, var_1.Length))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("c: {0}", var_5))</LogCall>
        <LogCall status="Default">Debug.Log(secondWord.Substring(0, var_5))</LogCall>
      </Method>
      <Method name="CallFunctionInAccessibleTerminalObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Found accessible terminal object with corresponding string, calling function")</LogCall>
      </Method>
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Group credits: {0}", this.groupCredits))</LogCall>
      </Method>
      <Method name="SyncTerminalValuesClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Syncing scanned enemies list with clients")</LogCall>
      </Method>
      <Method name="BeginUsingTerminal">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set interminalmenu to true: {0}", GameNetworkManager.Instance.localPlayerController.inTerminalMenu))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Caught error while entering computer terminal. Exiting player from terminal. Error: {0}", var_0))</LogCall>
      </Method>
      <Method name="QuitTerminal">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Quit terminal; inTerminalMenu true?: {playerScript.inTerminalMenu}")</LogCall>
      </Method>
      <Method name="OnDisable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Terminal disabled, disabling ESC key listener")</LogCall>
      </Method>
      <Method name="InitializeItemSalesPercentages">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Item sales percentages #{0}: {1}", var_0, this.itemSalesPercentages[var_0]))</LogCall>
      </Method>
      <Method name="__rpc_handler_3085407145">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="DisplayPlayerMicVolume">
      <Method name="InitMic">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("No devices connected")</LogCall>
      </Method>
    </Class>
    <Class name="IngamePlayerSettings">
      <Method name="DisplaySaveFileError">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error while loading general save data file!: {0}, enabling error panel for player", e))</LogCall>
      </Method>
      <Method name="UpdateAllKeybindOptions">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Reseting keybind UI")</LogCall>
      </Method>
      <Method name="SetOption">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set settings not applied!; {0}", optionType))</LogCall>
      </Method>
      <Method name="ChangeLookSens">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set mouse sensitivity to new value: {0}", setTo))</LogCall>
      </Method>
      <Method name="RefreshAndDisplayCurrentMicrophone">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("No recording devices found")</LogCall>
      </Method>
      <Method name="SwitchMicrophoneSetting">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("No mics found when trying to switch")</LogCall>
        <LogCall status="Default">Debug.Log("Switching microphone")</LogCall>
      </Method>
      <Method name="RebindKey">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Rebinding starting.. rebindIndex: {0}", var_0.rebindIndex))</LogCall>
        <LogCall status="Default">Debug.Log("Rebinding starting.. B")</LogCall>
      </Method>
      <Method name="CompleteRebind">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Setting binding index to default which is {0}", var_1))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Setting binding index to manual which is {0}", setBindingIndex))</LogCall>
        <LogCall status="Default">Debug.Log("Rebinding finishing.. A")</LogCall>
        <LogCall status="Default">Debug.Log("Rebinding finishing.. B")</LogCall>
      </Method>
      <Method name="CancelRebind">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Unable to activate input!: {0}", var_0))</LogCall>
      </Method>
      <Method name="SaveChangedSettings">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Saving changed settings")</LogCall>
      </Method>
      <Method name="DiscardChangedSettings">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Discarding changed settings")</LogCall>
      </Method>
    </Class>
    <Class name="LobbySlot">
      <Method name="JoinLobbyAfterVerifying">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Lobby id joining: {0}", lobbyId))</LogCall>
        <LogCall status="Default">Debug.Log("refreshing lobby...")</LogCall>
        <LogCall status="Default">Debug.Log("Waiting for lobby data refresh")</LogCall>
        <LogCall status="Default">Debug.Log("Could not refresh lobby")</LogCall>
      </Method>
      <Method name="OnLobbyDataRefresh">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Not waiting for lobby data refresh; returned")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Got lobby data refresh!; {0}", lobby.Id))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Members in lobby: {0}", lobby.MemberCount))</LogCall>
      </Method>
    </Class>
    <Class name="ShipAlarmCord">
      <Method name="HoldCordDown">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("HOLD horn local client called")</LogCall>
        <LogCall status="Default">Debug.Log("Hornblaring setting to true!")</LogCall>
      </Method>
      <Method name="StopHorn">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Stop horn local client called")</LogCall>
      </Method>
      <Method name="PullCordClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Received pull cord client rpc")</LogCall>
      </Method>
      <Method name="StopPullingCordClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Received STOP pull cord client rpc")</LogCall>
      </Method>
    </Class>
    <Class name="ShipLights">
      <Method name="SetShipLightsClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Received set ship lights RPC. Lights on?: {0}", this.areLightsOn))</LogCall>
      </Method>
      <Method name="ToggleShipLights">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Toggling ship lights RPC. lights now: {0}", this.areLightsOn))</LogCall>
      </Method>
      <Method name="SetShipLightsBoolean">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Calling ship lights boolean RPC: {0}", this.areLightsOn))</LogCall>
      </Method>
      <Method name="ToggleShipLightsOnLocalClientOnly">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set ship lights on client only: {0}", this.areLightsOn))</LogCall>
      </Method>
      <Method name="SetShipLightsOnLocalClientOnly">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set ship lights on client only: {0}", this.areLightsOn))</LogCall>
      </Method>
    </Class>
    <Class name="ShipTeleporter">
      <Method name="PressButtonEffects">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Using inverse teleporter was not allowed; {0}; {1}", StartOfRound.Instance.inShipPhase, StartOfRound.Instance.currentLevel.PlanetName))</LogCall>
      </Method>
      <Method name="TeleportPlayerOutWithInverseTeleporter">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Teleporter shaking camera")</LogCall>
      </Method>
    </Class>
    <Class name="ShotgunItem">
      <Method name="ShootGunAndSync">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Calling shoot gun....")</LogCall>
        <LogCall status="Default">Debug.Log("Calling shoot gun and sync")</LogCall>
      </Method>
      <Method name="ShootGunClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Shoot gun client rpc received")</LogCall>
        <LogCall status="Default">Debug.Log("localClientSendingShootGunRPC was true")</LogCall>
      </Method>
      <Method name="ShootGun">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Spherecast started inside enemy collider")</LogCall>
      </Method>
      <Method name="ItemInteractLeftRight">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("r/l activate: {0}", right))</LogCall>
      </Method>
      <Method name="SetControlTipsForItem">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Shotgun control tips array length is too short to set tips!")</LogCall>
      </Method>
      <Method name="ReloadGunEffectsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ReloadedGun">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("not reloading")</LogCall>
        <LogCall status="Default">Debug.Log("reloading!")</LogCall>
      </Method>
      <Method name="FindAmmoInInventory">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Ammo null in slot #{0}?: {1}", var_1, var_0 == null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Ammo in slot #{0} id: {1}", var_1, var_0.ammoType))</LogCall>
      </Method>
      <Method name="__rpc_handler_3349119596">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="ShowerTrigger">
      <Method name="AddPlayerToShower">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Added player #{0} to shower", playerScript.playerClientId))</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Shower is running with players inside!")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("spray decal #{0} found as child of {1}", this.cleanDecalIndex, this.playersInShower[var_1].transform))</LogCall>
      </Method>
    </Class>
    <Class name="SpikeRoofTrap">
      <Method name="ToggleSpikesEnabled">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Toggling turret to {0}!", enabled))</LogCall>
      </Method>
    </Class>
    <Class name="SprayPaintItem">
      <Method name="ItemActivate">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Start using spray")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Spray empty")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Spray not empty")</LogCall>
        <LogCall status="Suppressed">Debug.Log("Stop using spray")</LogCall>
      </Method>
      <Method name="ItemInteractLeftRight">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("interact {0} ; {1}; {2}", right, this.playerHeldBy == null, this.isSpraying))</LogCall>
      </Method>
      <Method name="LateUpdate">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Spraying, depleting tank")</LogCall>
      </Method>
      <Method name="TrySprayingWeedKillerBottle">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Add turbo boost")</LogCall>
      </Method>
      <Method name="SprayPaintServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ToggleSprayCollisionOnHolder">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("playerheldby is null!!!!!")</LogCall>
      </Method>
      <Method name="AddSprayPaintLocal">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("spray paint parenting to this object : ", this.sprayHit.collider.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("{0}; {1}", this.sprayHit.collider.tag, this.sprayHit.collider.tag.Length))</LogCall>
        <LogCall status="Default">Debug.Log("Adding to spray paint decals pool")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Spraypaint B {0}; index: {1}", SprayPaintItem.sprayPaintDecals.Count, SprayPaintItem.sprayPaintDecalsIndex))</LogCall>
        <LogCall status="Suppressed">Debug.LogError(String.Format("ERROR: spray paint at index {0} is null; creating new object in its place", SprayPaintItem.sprayPaintDecalsIndex))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("decal player num: {0}", var_1))</LogCall>
      </Method>
      <Method name="__rpc_handler_629055349">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="TerminalAccessibleObject">
      <Method name="CallFunctionFromTerminal">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("calling terminal function for code : ", this.objectCode, "; object name: ", this.gameObject.name))</LogCall>
      </Method>
      <Method name="TerminalCodeCooldownReached">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("cooldown reached for object with code : ", this.objectCode, "; object name: ", this.gameObject.name))</LogCall>
      </Method>
      <Method name="SetDoorOpen">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat(["Setting door ", this.gameObject.name, " with code ", this.objectCode, " to open"]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat(["Setting door ", this.gameObject.name, " with code ", this.objectCode, " to closed"]))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("setting big door open for door {0}; {1}; {2}", this.gameObject.name, this.isDoorOpen, open))</LogCall>
      </Method>
      <Method name="SetCodeTo">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Attempted setting code to an index higher than the amount of possible codes in TerminalAccessibleObject")</LogCall>
      </Method>
    </Class>
    <Class name="TetraChemicalItem">
      <Method name="RunOutOfFuelServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1607080184">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="VehicleController">
      <Method name="Start">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Max linear velocity: {0}; dep: {1}", this.mainRigidbody.maxLinearVelocity, this.mainRigidbody.maxDepenetrationVelocity))</LogCall>
      </Method>
      <Method name="ExitDriverSideSeat">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("local player in control? : {0}", this.localPlayerInControl))</LogCall>
      </Method>
      <Method name="SetPlayerInControlOfVehicleClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Set player in control: {0} ", playerId))</LogCall>
      </Method>
      <Method name="SyncCarPositionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="MagnetCarServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="CollectItemsInTruck">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("Collect items in truck A")</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Collect items in truck B; {0}", var_0.Count()))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Collect items in truck C; {0}", var_1 != null))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("{0}; {1}; {2}", var_1.isHeld == 0, var_1.isHeldByEnemy == 0, var_0[var_2].transform.parent == this.transform))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Magneted? : {0}", this.magnetedToShip))</LogCall>
      </Method>
      <Method name="StartMagneting">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Truck initial angle to magnet: {0}", var_0))</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Is networkobject spawned: {0}", this.NetworkObject.IsSpawned))</LogCall>
        <LogCall status="Default">Debug.Log("Destroying car on local client")</LogCall>
        <LogCall status="Default">Debug.Log("Destroying car on local client, next frame")</LogCall>
      </Method>
      <Method name="SetRadioSignalQualityServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SyncExtremeStressServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="PlayCollisionAudio">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log(String.Format("Play collision audio with type {0} A", audioType))</LogCall>
      </Method>
      <Method name="CarCollisionSFXServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DealDamageServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DestroyCar">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Destroy truck")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Killing player with force magnitude of : {0}", UnityEngine.Vector3.up * 27 + 20 * UnityEngine.Random.insideUnitSphere.magnitude))</LogCall>
      </Method>
      <Method name="__rpc_handler_2803421723">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2451439781">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2043456042">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3603115648">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1149255829">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_410929414">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="Zeekerss.Core.Singletons.Singleton`1">
      <Method name="get_Instance">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("There is more than one ", Type.GetTypeFromHandle(T).Name, " in the scene."))</LogCall>
      </Method>
    </Class>
    <Class name="GameNetcodeStuff.PlayerControllerB">
      <Method name="OnEnable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error while subscribing to input in PlayerController!: {0}", var_2))</LogCall>
      </Method>
      <Method name="OnDisable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error while unsubscribing from input in PlayerController!: {0}", var_2))</LogCall>
      </Method>
      <Method name="BreakLegsSFXServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DamagePlayerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartSinkingServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StopSinkingServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="MakeCriticallyInjuredServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="HealServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StartPerformingEmoteServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="StopPerformingEmoteServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SwitchItemSlotsServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="ItemSecondaryUse_performed">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Suppressed">Debug.Log("secondary use A")</LogCall>
        <LogCall status="Suppressed">Debug.Log("secondary use B")</LogCall>
        <LogCall status="Suppressed">Debug.Log("secondary use C")</LogCall>
        <LogCall status="Suppressed">Debug.Log("secondary use D")</LogCall>
        <LogCall status="Suppressed">Debug.Log("secondary use E")</LogCall>
        <LogCall status="Suppressed">Debug.Log("secondary use F")</LogCall>
        <LogCall status="Suppressed">Debug.Log("secondary use G")</LogCall>
      </Method>
      <Method name="SetSpecialGrabAnimationBool">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("An item tried to set an animator bool which does not exist: ", currentItem.itemProperties.grabAnim))</LogCall>
      </Method>
      <Method name="GrabObjectServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("Invalidated grab on ", this.gameObject.name, " on client; another player was already grabbing the same object"))</LogCall>
      </Method>
      <Method name="GrabObjectClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Error! Networkobject grabbed was not found on client: {0}", var_0.NetworkObjectId))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("playerHeldBy on grabbed object: {0}", this.currentlyHeldObjectServer.playerHeldBy))</LogCall>
        <LogCall status="Default">Debug.Log("grabbed object playerHeldBy is null")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Player #{0}: Was grabbing object {1} validated by server? : {2}", this.playerClientId, grabbedObject.NetworkObjectId, grabValidated))</LogCall>
        <LogCall status="Suppressed">Debug.Log("Local client got grab invalidated")</LogCall>
      </Method>
      <Method name="DespawnHeldObjectServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method obsolete="true" name="DiscardHeldObject">
        <!--Edit 'status' to customize log behavior-->
        <LogCall obsolete="true" status="Default">Debug.LogError(String.Concat("Error: physics region transform does not have network object?: ", var_0.gameObject.name))</LogCall>
      </Method>
      <Method name="ThrowObjectServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.LogError("Object was not thrown because it does not exist on the server.")</LogCall>
      </Method>
      <Method name="ThrowObjectClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("ThrowObjectClientRpc called for an object which is not the same as currentlyHeldObjectServer which is {0}, on player #{1}.", var_2, this.playerClientId))</LogCall>
        <LogCall status="Default">Debug.LogError("The server did not have a reference to the held object (when attempting to THROW on client.)")</LogCall>
      </Method>
      <Method name="PlaceObjectServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Object placement not synced to clients, missing reference to a network object: placing object with id: {0}; player #{1}", grabbedObject.NetworkObjectId, this.playerClientId))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("Object placement not synced to clients, missing reference to a network object: parent object with id: {0}; player #{1}", grabbedObject.NetworkObjectId, this.playerClientId))</LogCall>
      </Method>
      <Method name="PlaceObjectClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Reference to parent object when placing was missing. object: {0} placed by {1}", var_1, this.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.LogError(String.Format("ThrowObjectClientRpc called for an object which is not the same as currentlyHeldObjectServer which is {0}, on player #{1}.", var_3, this.playerClientId))</LogCall>
        <LogCall status="Default">Debug.LogError("The server did not have a reference to the held object (when attempting to PLACE object on client.)")</LogCall>
      </Method>
      <Method name="PlayerJumpedServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="UpdatePlayerRotationServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", var_0))</LogCall>
      </Method>
      <Method name="UpdatePlayerRotationFullServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", var_0))</LogCall>
      </Method>
      <Method name="UpdatePlayerAnimationServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", var_0))</LogCall>
      </Method>
      <Method name="IsInSpecialAnimationServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", var_0))</LogCall>
      </Method>
      <Method name="IsInSpecialAnimationClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log("Setting animation on client")</LogCall>
      </Method>
      <Method name="UpdatePlayerPositionServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Caught an error when sending player position RPC; likely a player disconnected to cause this. Error: {0}", var_0))</LogCall>
      </Method>
      <Method name="RemovePlayerPhysicsParentServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Caught an error when sending RemovePhysicsParent RPC. Error: {0}", var_0))</LogCall>
      </Method>
      <Method name="UpdatePlayerPhysicsParentServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("Caught an error when sending UpdatePhysicsParent RPC. Error: {0}", var_0))</LogCall>
      </Method>
      <Method name="LandFromJumpServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DisableJetpackModeServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="Update">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Taking control of player ", this.gameObject.name, " and enabling camera!"))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("!!!! ENABLING CAMERA FOR PLAYER: ", this.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("!!!! connectedPlayersAmount: {0}", this.playersManager.connectedPlayersAmount))</LogCall>
        <LogCall status="Suppressed">Debug.Log(String.Format("Average velocity: {0}", this.averageVelocity))</LogCall>
        <LogCall status="Default">Debug.Log("Take damage a")</LogCall>
        <LogCall status="Default">Debug.Log("Take damage b")</LogCall>
        <LogCall status="Default">Debug.Log("Take damage c")</LogCall>
        <LogCall status="Default">Debug.LogWarning("!!! No cameras are enabled !!!")</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("!!!! DISABLING CAMERA FOR PLAYER: ", this.gameObject.name))</LogCall>
      </Method>
      <Method name="SetFaceUnderwaterServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="SetFaceOutOfWaterServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="TeleportPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Called teleport function on ", this.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log("Player is sinking; disable all quicksand locally")</LogCall>
      </Method>
      <Method name="KillPlayer">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("Running kill player function for LOCAL client, player object: ", this.gameObject.name))</LogCall>
      </Method>
      <Method name="KillPlayerServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="KillPlayerClientRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Concat("A player died. player object: ", this.gameObject.name))</LogCall>
        <LogCall status="Default">Debug.Log("Setting living players minus one.")</LogCall>
        <LogCall status="Default">Debug.Log(this.playersManager.livingPlayers)</LogCall>
      </Method>
      <Method name="DestroyItemInSlotAndSync">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Destroy item in slot called for a slot (slot {0}) which is empty or incorrect", itemSlot))</LogCall>
      </Method>
      <Method name="DestroyItemInSlotServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="DestroyItemInSlot">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Destroying item in slot {0}; {1}; is currentlyheldobjectserver null: {2}", itemSlot, this.currentItemSlot, this.currentlyHeldObjectServer == null))</LogCall>
        <LogCall status="Default">Debug.Log(String.Concat("currentlyHeldObjectServer: ", this.currentlyHeldObjectServer.itemProperties.itemName))</LogCall>
      </Method>
      <Method name="SetSpectatedPlayerEffects">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Error caught in SpectatedPlayerEffects: {0}", var_5))</LogCall>
      </Method>
      <Method name="__rpc_handler_800455552">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1084949295">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3986869491">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_341877959">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_4195705835">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2585603452">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3803364611">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_878005044">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_412259855">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1554282707">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1786952262">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2376977494">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3830452098">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_420292904">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_588787670">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2609793477">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3473255830">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2480354441">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2013428264">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3843228541">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1155355692">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3332990272">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3237016509">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1048203095">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_3262284737">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_4121569671">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_1388366573">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="DigitalRuby.ThunderAndLightning.LightningBoltParameters">
      <Method name="set_Generations">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("Unable to read lightning quality settings from level ", var_2.ToString()))</LogCall>
      </Method>
    </Class>
    <Class name="DigitalRuby.ThunderAndLightning.LightningBolt">
      <Method name="SetupLightningBolt">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Lightning bolt dependencies must not be null")</LogCall>
        <LogCall status="Default">Debug.LogError("This lightning bolt is already in use!")</LogCall>
      </Method>
      <Method name="CreateLightsForGroup">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("Unable to read lightning quality for level ", var_9.ToString()))</LogCall>
      </Method>
    </Class>
    <Class name="DigitalRuby.ThunderAndLightning.LightningThreadState">
      <Method name="BackgroundThreadMethod">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogErrorFormat("Lightning thread exception: {0}", [var_3])</LogCall>
      </Method>
    </Class>
    <Class name="DigitalRuby.ThunderAndLightning.LightningBoltTransformTrackerScript">
      <Method name="CustomTransformHandler">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("LightningScript property must be set to non-null.")</LogCall>
      </Method>
    </Class>
    <Class name="DigitalRuby.ThunderAndLightning.LightningGeneratorPath">
      <Method name="GenerateLightningBoltPath">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Lightning path should have at least two points")</LogCall>
      </Method>
    </Class>
    <Class name="DigitalRuby.ThunderAndLightning.LightningSplineScript">
      <Method name="CreateLightningBolt">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("To create spline lightning, you need a lightning path with at least ", 4.ToString(), " points."))</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.DungeonGenerator">
      <Method name="ProcessGlobalProps">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogWarning(String.Concat("Dungeon Flow contains multiple entries for the global prop group ID: ", var_12.pair.Key.ToString(), ". Only the first entry will be used."))</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.TileProxy">
      <Method name=".ctor">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format("Tile prefab '{0}' has automatic bounds that are zero or negative in size. The bounding volume for this tile will need to be manually defined.", prefab), prefab)</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.DungeonArchetypeValidator">
      <Method name="LogError">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Format(String.Concat("[ArchetypeValidator] Error: ", format), args))</LogCall>
      </Method>
      <Method name="LogWarning">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogWarning(String.Format(String.Concat("[ArchetypeValidator] Warning: ", format), args))</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.Graph.DungeonFlow">
      <Method name="GetLineAtDepth">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("GetLineAtDepth was unable to find a line at depth ", normalizedDepth.ToString(), ". This shouldn't happen."))</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.Editor.RuntimeAnalyzer">
      <Method name="Analyze">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("No DungeonFlow assigned to analyzer")</LogCall>
        <LogCall status="Default">Debug.LogError("Iteration count must be greater than 0")</LogCall>
        <LogCall status="Default">Debug.LogError("Max failed attempt count must be greater than 0")</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.Adapters.BaseAdapter">
      <Method name="OnEnable">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError(String.Concat("[DunGen Adapter] RuntimeDungeon component is missing on GameObject '", this.gameObject.name, "'. Adapters must be attached to the same GameObject as your RuntimeDungeon component"))</LogCall>
      </Method>
    </Class>
    <Class name="DunGen.Adapters.UnityNavMesh2DAdapter">
      <Method name="GetBuildSettings">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogWarning(String.Concat("No build settings for agent type ID ", this.AgentTypeID.ToString()), this)</LogCall>
      </Method>
    </Class>
    <Class name="Dissonance.Integrations.Unity_NFGO.NfgoPlayer">
      <Method name="SetNameServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2083405329">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="Dissonance.Integrations.Unity_NFGO.NfgoPlayerModified">
      <Method name="SetNameServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="__rpc_handler_2623869394">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="MeteorShowers">
      <Method name="SetStartMeteorShower">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Enable meteor!; {0}", this.IsServer))</LogCall>
        <LogCall status="Default">Debug.Log(String.Format("failed start meteor shower; Normalized time of day: {0}", TimeOfDay.Instance.normalizedTimeOfDay))</LogCall>
      </Method>
      <Method name="CreateMeteorServerRpc">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
      <Method name="BeginDay">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Meteors number: {0}; {1}", var_1, Mathf.Clamp(this.numberOfMeteorsCurve.Evaluate(var_0) * 200, 180, 250)))</LogCall>
      </Method>
      <Method name="__rpc_handler_505987061">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!")</LogCall>
      </Method>
    </Class>
    <Class name="PlayerPhysicsRegion">
      <Method name="OnDestroy">
        <!--Edit 'status' to customize log behavior-->
        <LogCall status="Default">Debug.Log(String.Format("Player {0} setting parent null since physics region was destroyed", var_1))</LogCall>
      </Method>
      <Method obsolete="true" name="OnTriggerStay">
        <!--Edit 'status' to customize log behavior-->
        <LogCall obsolete="true" status="Suppressed">Debug.Log(String.Format("Got player in physics region: {0}", var_1))</LogCall>
        <LogCall obsolete="true" status="Default">Debug.Log("Set player physics region", this.gameObject)</LogCall>
        <LogCall obsolete="true" status="Default">Debug.Log(String.Format("Angle: {0}", Vector3.Angle(this.transform.up, UnityEngine.Vector3.up)))</LogCall>
      </Method>
    </Class>
  </Assembly>
</Configuration>