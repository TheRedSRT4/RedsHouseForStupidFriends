name: Update Single Release

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Grant write permissions to access release resources

jobs:
  update_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Create ZIP File
      run: |
        zip -r repository.zip . -x ".git/*"

    - name: Get Release ID
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const releaseName = "Latest Release"
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          })
          const release = releases.data.find(r => r.name === releaseName)
          if (!release) {
            throw new Error(`Release with name "${releaseName}" not found`)
          }
          core.setOutput('id', release.id)
          core.setOutput('upload_url', release.upload_url)

    - name: Delete Existing Asset
      uses: actions/github-script@v6
      with:
        script: |
          const releaseId = ${{ steps.get_release.outputs.id }}
          const assets = await github.rest.repos.listReleaseAssets({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId
          })
          for (const asset of assets.data) {
            if (asset.name === "repository.zip") {
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              })
              console.log(`Deleted asset: ${asset.name}`)
            }
          }

    - name: Upload Updated ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./repository.zip
        asset_name: repository.zip
        asset_content_type: application/zip
